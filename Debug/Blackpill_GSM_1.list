
Blackpill_GSM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080077e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005828  20000074  0800785c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000589c  0800785c  0002589c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdc3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370f  00000000  00000000  0003ce67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00040578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00041a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c3a  00000000  00000000  00042da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ce8  00000000  00000000  0005b9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f49  00000000  00000000  000726c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b60b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a88  00000000  00000000  0010b660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800762c 	.word	0x0800762c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800762c 	.word	0x0800762c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <at_sm_initialize>:
} at_ctrl_st;

at_ctrl_st  at_ctrl;

void at_sm_initialize(UART_HandleTypeDef *uart_ptr)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	memset(&at_ctrl,0x00, sizeof(at_ctrl));
 8000590:	2258      	movs	r2, #88	; 0x58
 8000592:	2100      	movs	r1, #0
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <at_sm_initialize+0x20>)
 8000596:	f006 fc21 	bl	8006ddc <memset>
	at_ctrl.phuart = uart_ptr;
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <at_sm_initialize+0x20>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6553      	str	r3, [r2, #84]	; 0x54
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200049b0 	.word	0x200049b0

080005ac <at_sm_main>:


/// @brief  at command state machine
void at_sm_main(void)
{
 80005ac:	b598      	push	{r3, r4, r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	switch(at_ctrl.state)
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <at_sm_main+0x50>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d81e      	bhi.n	80005f6 <at_sm_main+0x4a>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <at_sm_main+0x14>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	080005f5 	.word	0x080005f5
 80005c8:	080005f5 	.word	0x080005f5
 80005cc:	080005f5 	.word	0x080005f5
	{
	case AT_STATE_INITAL:
		sprintf(at_ctrl.txt,"AT\r\n");
 80005d0:	490b      	ldr	r1, [pc, #44]	; (8000600 <at_sm_main+0x54>)
 80005d2:	480c      	ldr	r0, [pc, #48]	; (8000604 <at_sm_main+0x58>)
 80005d4:	f006 fc0a 	bl	8006dec <siprintf>
	  	HAL_UART_Transmit(at_ctrl.phuart, (uint8_t*)at_ctrl.txt, strlen(at_ctrl.txt),HAL_MAX_DELAY);
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <at_sm_main+0x50>)
 80005da:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <at_sm_main+0x58>)
 80005de:	f7ff fdff 	bl	80001e0 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	4906      	ldr	r1, [pc, #24]	; (8000604 <at_sm_main+0x58>)
 80005ec:	4620      	mov	r0, r4
 80005ee:	f002 fab0 	bl	8002b52 <HAL_UART_Transmit>
		break;
 80005f2:	e000      	b.n	80005f6 <at_sm_main+0x4a>
	case AT_STATE_1:
		break;
 80005f4:	bf00      	nop
	case AT_STATE_2:
		break;
	case AT_STATE_3:
		break;
	}
}
 80005f6:	bf00      	nop
 80005f8:	bd98      	pop	{r3, r4, r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200049b0 	.word	0x200049b0
 8000600:	08007644 	.word	0x08007644
 8000604:	200049b1 	.word	0x200049b1

08000608 <HAL_UARTEx_RxEventCallback>:
uint32_t millis = 0;
bool     uart2_tx_done;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART6)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a30      	ldr	r2, [pc, #192]	; (80006dc <HAL_UARTEx_RxEventCallback+0xd4>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d15a      	bne.n	80006d4 <HAL_UARTEx_RxEventCallback+0xcc>
	{
		//HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
		MsgBook.Row[MsgBook.head_indx].Source = 6;
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000620:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 8000624:	4619      	mov	r1, r3
 8000626:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000628:	460b      	mov	r3, r1
 800062a:	015b      	lsls	r3, r3, #5
 800062c:	440b      	add	r3, r1
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	4413      	add	r3, r2
 8000632:	3306      	adds	r3, #6
 8000634:	2206      	movs	r2, #6
 8000636:	701a      	strb	r2, [r3, #0]
		MsgBook.Row[MsgBook.head_indx].DataLen = Size;
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 800063a:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 800063e:	4619      	mov	r1, r3
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000642:	460b      	mov	r3, r1
 8000644:	015b      	lsls	r3, r3, #5
 8000646:	440b      	add	r3, r1
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	4413      	add	r3, r2
 800064c:	3304      	adds	r3, #4
 800064e:	887a      	ldrh	r2, [r7, #2]
 8000650:	801a      	strh	r2, [r3, #0]
		MsgBook.Row[MsgBook.head_indx].TimeStamp = millis;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000654:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 8000658:	4618      	mov	r0, r3
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <HAL_UARTEx_RxEventCallback+0xdc>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4920      	ldr	r1, [pc, #128]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000660:	4603      	mov	r3, r0
 8000662:	015b      	lsls	r3, r3, #5
 8000664:	4403      	add	r3, r0
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	440b      	add	r3, r1
 800066a:	601a      	str	r2, [r3, #0]
		memcpy(MsgBook.Row[MsgBook.head_indx].Data, RxBuf6, Size);
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 800066e:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 8000672:	461a      	mov	r2, r3
 8000674:	4613      	mov	r3, r2
 8000676:	015b      	lsls	r3, r3, #5
 8000678:	4413      	add	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 800067e:	4413      	add	r3, r2
 8000680:	3307      	adds	r3, #7
 8000682:	887a      	ldrh	r2, [r7, #2]
 8000684:	4918      	ldr	r1, [pc, #96]	; (80006e8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000686:	4618      	mov	r0, r3
 8000688:	f006 fb9a 	bl	8006dc0 <memcpy>

		MsgBook.head_indx++;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 800068e:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 8000692:	3301      	adds	r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000698:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
		if (MsgBook.head_indx >= MSG_ROWS)
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 800069e:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 80006a2:	2b07      	cmp	r3, #7
 80006a4:	d903      	bls.n	80006ae <HAL_UARTEx_RxEventCallback+0xa6>
		{
			MsgBook.head_indx = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
		}
		osSemaphoreRelease(availRowCntrSemHandle);
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_UARTEx_RxEventCallback+0xe4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fd3e 	bl	8004134 <osSemaphoreRelease>

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *) RxBuf6, RX_BUF_SIZE);
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	490a      	ldr	r1, [pc, #40]	; (80006e8 <HAL_UARTEx_RxEventCallback+0xe0>)
 80006be:	480c      	ldr	r0, [pc, #48]	; (80006f0 <HAL_UARTEx_RxEventCallback+0xe8>)
 80006c0:	f002 fad9 	bl	8002c76 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_UARTEx_RxEventCallback+0xec>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_UARTEx_RxEventCallback+0xec>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f022 0208 	bic.w	r2, r2, #8
 80006d2:	601a      	str	r2, [r3, #0]
	}

}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40011400 	.word	0x40011400
 80006e0:	20004ad8 	.word	0x20004ad8
 80006e4:	20000090 	.word	0x20000090
 80006e8:	2000531c 	.word	0x2000531c
 80006ec:	20004a70 	.word	0x20004a70
 80006f0:	20005520 	.word	0x20005520
 80006f4:	20004a0c 	.word	0x20004a0c

080006f8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <HAL_UART_TxCpltCallback+0x3c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d10f      	bne.n	800072a <HAL_UART_TxCpltCallback+0x32>
	{
		osSemaphoreRelease(txdReadySemaHandle);
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_UART_TxCpltCallback+0x40>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fd10 	bl	8004134 <osSemaphoreRelease>
		uart2_tx_done = true;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_UART_TxCpltCallback+0x44>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
		__HAL_DMA_DISABLE_IT(&hdma_usart2_tx, DMA_IT_HT);
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_UART_TxCpltCallback+0x48>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <HAL_UART_TxCpltCallback+0x48>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f022 0208 	bic.w	r2, r2, #8
 8000728:	601a      	str	r2, [r3, #0]
	}
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40004400 	.word	0x40004400
 8000738:	20004a74 	.word	0x20004a74
 800073c:	20005568 	.word	0x20005568
 8000740:	20004a78 	.word	0x20004a78

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074a:	f000 fc11 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074e:	f000 f899 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000752:	f000 f97f 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000756:	f000 f947 	bl	80009e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800075a:	f000 f8f1 	bl	8000940 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800075e:	f000 f919 	bl	8000994 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  memset(&MsgBook,0x00,sizeof(MsgBook));
 8000762:	f640 0244 	movw	r2, #2116	; 0x844
 8000766:	2100      	movs	r1, #0
 8000768:	482f      	ldr	r0, [pc, #188]	; (8000828 <main+0xe4>)
 800076a:	f006 fb37 	bl	8006ddc <memset>

  HAL_UART_MspInit(&huart2);
 800076e:	482f      	ldr	r0, [pc, #188]	; (800082c <main+0xe8>)
 8000770:	f000 fa0e 	bl	8000b90 <HAL_UART_MspInit>
  memset(TxBuf2, 0x00, TX_BUF_SIZE);
 8000774:	2250      	movs	r2, #80	; 0x50
 8000776:	2100      	movs	r1, #0
 8000778:	482d      	ldr	r0, [pc, #180]	; (8000830 <main+0xec>)
 800077a:	f006 fb2f 	bl	8006ddc <memset>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf6, RX_BUF_SIZE);
 800077e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000782:	492c      	ldr	r1, [pc, #176]	; (8000834 <main+0xf0>)
 8000784:	482c      	ldr	r0, [pc, #176]	; (8000838 <main+0xf4>)
 8000786:	f002 fa76 	bl	8002c76 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <main+0xf8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <main+0xf8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f022 0208 	bic.w	r2, r2, #8
 8000798:	601a      	str	r2, [r3, #0]


	sprintf(txt,"Blackpill GSM 1\r\n");
 800079a:	463b      	mov	r3, r7
 800079c:	4928      	ldr	r1, [pc, #160]	; (8000840 <main+0xfc>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 fb24 	bl	8006dec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);
 80007a4:	463b      	mov	r3, r7
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fd1a 	bl	80001e0 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4639      	mov	r1, r7
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	481d      	ldr	r0, [pc, #116]	; (800082c <main+0xe8>)
 80007b8:	f002 f9cb 	bl	8002b52 <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007bc:	f003 fb3a 	bl	8003e34 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txdReadySema */
  txdReadySemaHandle = osSemaphoreNew(1, 1, &txdReadySema_attributes);
 80007c0:	4a20      	ldr	r2, [pc, #128]	; (8000844 <main+0x100>)
 80007c2:	2101      	movs	r1, #1
 80007c4:	2001      	movs	r0, #1
 80007c6:	f003 fc2c 	bl	8004022 <osSemaphoreNew>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <main+0x104>)
 80007ce:	6013      	str	r3, [r2, #0]

  /* creation of availRowCntrSem */
  availRowCntrSemHandle = osSemaphoreNew(8, 8, &availRowCntrSem_attributes);
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <main+0x108>)
 80007d2:	2108      	movs	r1, #8
 80007d4:	2008      	movs	r0, #8
 80007d6:	f003 fc24 	bl	8004022 <osSemaphoreNew>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <main+0x10c>)
 80007de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007e0:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <main+0x110>)
 80007e2:	2100      	movs	r1, #0
 80007e4:	481c      	ldr	r0, [pc, #112]	; (8000858 <main+0x114>)
 80007e6:	f003 fb6f 	bl	8003ec8 <osThreadNew>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <main+0x118>)
 80007ee:	6013      	str	r3, [r2, #0]

  /* creation of sendGsmTask */
  sendGsmTaskHandle = osThreadNew(StartSendGsmTask, NULL, &sendGsmTask_attributes);
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <main+0x11c>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	481b      	ldr	r0, [pc, #108]	; (8000864 <main+0x120>)
 80007f6:	f003 fb67 	bl	8003ec8 <osThreadNew>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <main+0x124>)
 80007fe:	6013      	str	r3, [r2, #0]

  /* creation of parseGsmTask */
  parseGsmTaskHandle = osThreadNew(StartParseGsmTask, NULL, &parseGsmTask_attributes);
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <main+0x128>)
 8000802:	2100      	movs	r1, #0
 8000804:	481a      	ldr	r0, [pc, #104]	; (8000870 <main+0x12c>)
 8000806:	f003 fb5f 	bl	8003ec8 <osThreadNew>
 800080a:	4603      	mov	r3, r0
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <main+0x130>)
 800080e:	6013      	str	r3, [r2, #0]

  /* creation of gsmCtrlTask */
  gsmCtrlTaskHandle = osThreadNew(StartGsmCtrlTask, NULL, &gsmCtrlTask_attributes);
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <main+0x134>)
 8000812:	2100      	movs	r1, #0
 8000814:	4819      	ldr	r0, [pc, #100]	; (800087c <main+0x138>)
 8000816:	f003 fb57 	bl	8003ec8 <osThreadNew>
 800081a:	4603      	mov	r3, r0
 800081c:	4a18      	ldr	r2, [pc, #96]	; (8000880 <main+0x13c>)
 800081e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000820:	f003 fb2c 	bl	8003e7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000824:	e7fe      	b.n	8000824 <main+0xe0>
 8000826:	bf00      	nop
 8000828:	20004ad8 	.word	0x20004ad8
 800082c:	2000556c 	.word	0x2000556c
 8000830:	200057b0 	.word	0x200057b0
 8000834:	2000531c 	.word	0x2000531c
 8000838:	20005520 	.word	0x20005520
 800083c:	20004a0c 	.word	0x20004a0c
 8000840:	080076a0 	.word	0x080076a0
 8000844:	08007764 	.word	0x08007764
 8000848:	20004a74 	.word	0x20004a74
 800084c:	08007774 	.word	0x08007774
 8000850:	20004a70 	.word	0x20004a70
 8000854:	080076d4 	.word	0x080076d4
 8000858:	08000a89 	.word	0x08000a89
 800085c:	20004a08 	.word	0x20004a08
 8000860:	080076f8 	.word	0x080076f8
 8000864:	08000a99 	.word	0x08000a99
 8000868:	2000551c 	.word	0x2000551c
 800086c:	0800771c 	.word	0x0800771c
 8000870:	08000ae9 	.word	0x08000ae9
 8000874:	20005564 	.word	0x20005564
 8000878:	08007740 	.word	0x08007740
 800087c:	08000af9 	.word	0x08000af9
 8000880:	20004a6c 	.word	0x20004a6c

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f006 faa2 	bl	8006ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <SystemClock_Config+0xb4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SystemClock_Config+0xb4>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <SystemClock_Config+0xb4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <SystemClock_Config+0xb8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a1b      	ldr	r2, [pc, #108]	; (800093c <SystemClock_Config+0xb8>)
 80008ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <SystemClock_Config+0xb8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2310      	movs	r3, #16
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 f9e5 	bl	8001cc4 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000900:	f000 f914 	bl	8000b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fc48 	bl	80021b4 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800092a:	f000 f8ff 	bl	8000b2c <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3750      	adds	r7, #80	; 0x50
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_USART2_UART_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000978:	f002 f89e 	bl	8002ab8 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f8d3 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000556c 	.word	0x2000556c
 8000990:	40004400 	.word	0x40004400

08000994 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART6_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_USART6_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART6_UART_Init+0x4c>)
 80009a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART6_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART6_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART6_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART6_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART6_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART6_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART6_UART_Init+0x4c>)
 80009cc:	f002 f874 	bl	8002ab8 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f8a9 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20005520 	.word	0x20005520
 80009e4:	40011400 	.word	0x40011400

080009e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_DMA_Init+0x68>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <MX_DMA_Init+0x68>)
 80009f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_DMA_Init+0x68>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_DMA_Init+0x68>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <MX_DMA_Init+0x68>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_DMA_Init+0x68>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2105      	movs	r1, #5
 8000a2a:	2011      	movs	r0, #17
 8000a2c:	f000 fb9a 	bl	8001164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a30:	2011      	movs	r0, #17
 8000a32:	f000 fbb3 	bl	800119c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	2039      	movs	r0, #57	; 0x39
 8000a3c:	f000 fb92 	bl	8001164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a40:	2039      	movs	r0, #57	; 0x39
 8000a42:	f000 fbab 	bl	800119c <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_GPIO_Init+0x30>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <MX_GPIO_Init+0x30>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_GPIO_Init+0x30>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f003 faab 	bl	8003fec <osDelay>
 8000a96:	e7fb      	b.n	8000a90 <StartDefaultTask+0x8>

08000a98 <StartSendGsmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendGsmTask */
void StartSendGsmTask(void *argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendGsmTask */
	char txt[40];

	at_sm_initialize(&huart6);
 8000aa0:	480e      	ldr	r0, [pc, #56]	; (8000adc <StartSendGsmTask+0x44>)
 8000aa2:	f7ff fd71 	bl	8000588 <at_sm_initialize>


  /* Infinite loop */
  for(;;)
  {
	  sprintf(txt,"AT\r\n");
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <StartSendGsmTask+0x48>)
 8000aac:	4618      	mov	r0, r3
 8000aae:	f006 f99d 	bl	8006dec <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fb92 	bl	80001e0 <strlen>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	f107 0108 	add.w	r1, r7, #8
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <StartSendGsmTask+0x4c>)
 8000aca:	f002 f842 	bl	8002b52 <HAL_UART_Transmit>
	  	at_sm_main();
 8000ace:	f7ff fd6d 	bl	80005ac <at_sm_main>
    osDelay(2000);
 8000ad2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ad6:	f003 fa89 	bl	8003fec <osDelay>
	  sprintf(txt,"AT\r\n");
 8000ada:	e7e4      	b.n	8000aa6 <StartSendGsmTask+0xe>
 8000adc:	20005520 	.word	0x20005520
 8000ae0:	080076b4 	.word	0x080076b4
 8000ae4:	2000556c 	.word	0x2000556c

08000ae8 <StartParseGsmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParseGsmTask */
void StartParseGsmTask(void *argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParseGsmTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f003 fa7b 	bl	8003fec <osDelay>
 8000af6:	e7fb      	b.n	8000af0 <StartParseGsmTask+0x8>

08000af8 <StartGsmCtrlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGsmCtrlTask */
void StartGsmCtrlTask(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGsmCtrlTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f003 fa73 	bl	8003fec <osDelay>
 8000b06:	e7fb      	b.n	8000b00 <StartGsmCtrlTask+0x8>

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1a:	f000 fa4b 	bl	8000fb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40000c00 	.word	0x40000c00

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_MspInit+0x54>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <HAL_MspInit+0x54>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x54>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_MspInit+0x54>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_MspInit+0x54>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_MspInit+0x54>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	f06f 0001 	mvn.w	r0, #1
 8000b7e:	f000 faf1 	bl	8001164 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a64      	ldr	r2, [pc, #400]	; (8000d40 <HAL_UART_MspInit+0x1b0>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d15a      	bne.n	8000c68 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	4b63      	ldr	r3, [pc, #396]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a62      	ldr	r2, [pc, #392]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b60      	ldr	r3, [pc, #384]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	4b5c      	ldr	r3, [pc, #368]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a5b      	ldr	r2, [pc, #364]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bea:	230c      	movs	r3, #12
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4850      	ldr	r0, [pc, #320]	; (8000d48 <HAL_UART_MspInit+0x1b8>)
 8000c06:	f000 fed9 	bl	80019bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000c0a:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c0c:	4a50      	ldr	r2, [pc, #320]	; (8000d50 <HAL_UART_MspInit+0x1c0>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000c10:	4b4e      	ldr	r3, [pc, #312]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c16:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c18:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c1a:	2240      	movs	r2, #64	; 0x40
 8000c1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1e:	4b4b      	ldr	r3, [pc, #300]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c24:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2c:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c32:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c38:	4b44      	ldr	r3, [pc, #272]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c3e:	4b43      	ldr	r3, [pc, #268]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c44:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c4a:	4840      	ldr	r0, [pc, #256]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c4c:	f000 fab4 	bl	80011b8 <HAL_DMA_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000c56:	f7ff ff69 	bl	8000b2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a3b      	ldr	r2, [pc, #236]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c60:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c66:	e067      	b.n	8000d38 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART6)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a39      	ldr	r2, [pc, #228]	; (8000d54 <HAL_UART_MspInit+0x1c4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d162      	bne.n	8000d38 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a32      	ldr	r2, [pc, #200]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000c7c:	f043 0320 	orr.w	r3, r3, #32
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f003 0320 	and.w	r3, r3, #32
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_UART_MspInit+0x1b4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000caa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4820      	ldr	r0, [pc, #128]	; (8000d48 <HAL_UART_MspInit+0x1b8>)
 8000cc8:	f000 fe78 	bl	80019bc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000cce:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <HAL_UART_MspInit+0x1cc>)
 8000cd0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000cd4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000cd8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000d0c:	4812      	ldr	r0, [pc, #72]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000d0e:	f000 fa53 	bl	80011b8 <HAL_DMA_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000d18:	f7ff ff08 	bl	8000b2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
 8000d22:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2105      	movs	r1, #5
 8000d2c:	2047      	movs	r0, #71	; 0x47
 8000d2e:	f000 fa19 	bl	8001164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000d32:	2047      	movs	r0, #71	; 0x47
 8000d34:	f000 fa32 	bl	800119c <HAL_NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	20004a78 	.word	0x20004a78
 8000d50:	400260a0 	.word	0x400260a0
 8000d54:	40011400 	.word	0x40011400
 8000d58:	20004a0c 	.word	0x20004a0c
 8000d5c:	40026428 	.word	0x40026428

08000d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	; 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	2032      	movs	r0, #50	; 0x32
 8000d76:	f000 f9f5 	bl	8001164 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d7a:	2032      	movs	r0, #50	; 0x32
 8000d7c:	f000 fa0e 	bl	800119c <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <HAL_InitTick+0xa0>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a1d      	ldr	r2, [pc, #116]	; (8000e00 <HAL_InitTick+0xa0>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_InitTick+0xa0>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d9c:	f107 0210 	add.w	r2, r7, #16
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fbd4 	bl	8002554 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dac:	f001 fbaa 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8000db0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db4:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <HAL_InitTick+0xa4>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	0c9b      	lsrs	r3, r3, #18
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_InitTick+0xac>)
 8000dc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dcc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_InitTick+0xa8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <HAL_InitTick+0xa8>)
 8000de2:	f001 fbe9 	bl	80025b8 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d104      	bne.n	8000df6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dee:	f001 fc3d 	bl	800266c <HAL_TIM_Base_Start_IT>
 8000df2:	4603      	mov	r3, r0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3730      	adds	r7, #48	; 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	431bde83 	.word	0x431bde83
 8000e08:	20005800 	.word	0x20005800
 8000e0c:	40000c00 	.word	0x40000c00

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <DMA1_Stream6_IRQHandler+0x10>)
 8000e42:	f000 fb51 	bl	80014e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20004a78 	.word	0x20004a78

08000e50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <TIM5_IRQHandler+0x10>)
 8000e56:	f001 fc6b 	bl	8002730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20005800 	.word	0x20005800

08000e64 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <DMA2_Stream1_IRQHandler+0x10>)
 8000e6a:	f000 fb3d 	bl	80014e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20004a0c 	.word	0x20004a0c

08000e78 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <USART6_IRQHandler+0x10>)
 8000e7e:	f001 ff5f 	bl	8002d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20005520 	.word	0x20005520

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f005 ff56 	bl	8006d6c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000094 	.word	0x20000094
 8000ef4:	200058a0 	.word	0x200058a0

08000ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f005 ff15 	bl	8006d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fbf9 	bl	8000744 <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f60:	080077e8 	.word	0x080077e8
  ldr r2, =_sbss
 8000f64:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f68:	2000589c 	.word	0x2000589c

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_Init+0x40>)
 8000f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_Init+0x40>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_Init+0x40>)
 8000f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f8d8 	bl	800114e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	200f      	movs	r0, #15
 8000fa0:	f7ff fede 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa4:	f7ff fdc8 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023c00 	.word	0x40023c00

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20005848 	.word	0x20005848

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20005848 	.word	0x20005848

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff4c 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001176:	f7ff ff61 	bl	800103c <__NVIC_GetPriorityGrouping>
 800117a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	6978      	ldr	r0, [r7, #20]
 8001182:	f7ff ffb1 	bl	80010e8 <NVIC_EncodePriority>
 8001186:	4602      	mov	r2, r0
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff80 	bl	8001094 <__NVIC_SetPriority>
}
 8001194:	bf00      	nop
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff54 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ff0a 	bl	8000fdc <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e099      	b.n	8001308 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2202      	movs	r2, #2
 80011d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f4:	e00f      	b.n	8001216 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011f6:	f7ff fef1 	bl	8000fdc <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b05      	cmp	r3, #5
 8001202:	d908      	bls.n	8001216 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2220      	movs	r2, #32
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e078      	b.n	8001308 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e8      	bne.n	80011f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <HAL_DMA_Init+0x158>)
 8001230:	4013      	ands	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001242:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4313      	orrs	r3, r2
 8001266:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	2b04      	cmp	r3, #4
 800126e:	d107      	bne.n	8001280 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4313      	orrs	r3, r2
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4313      	orrs	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f023 0307 	bic.w	r3, r3, #7
 8001296:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	4313      	orrs	r3, r2
 80012a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d117      	bne.n	80012da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00e      	beq.n	80012da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fb01 	bl	80018c4 <DMA_CheckFifoParam>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012d6:	2301      	movs	r3, #1
 80012d8:	e016      	b.n	8001308 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fab8 	bl	8001858 <DMA_CalcBaseAndBitshift>
 80012e8:	4603      	mov	r3, r0
 80012ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f0:	223f      	movs	r2, #63	; 0x3f
 80012f2:	409a      	lsls	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	f010803f 	.word	0xf010803f

08001314 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_DMA_Start_IT+0x26>
 8001336:	2302      	movs	r3, #2
 8001338:	e040      	b.n	80013bc <HAL_DMA_Start_IT+0xa8>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d12f      	bne.n	80013ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2202      	movs	r2, #2
 8001352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 fa4a 	bl	80017fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	223f      	movs	r2, #63	; 0x3f
 800136e:	409a      	lsls	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0216 	orr.w	r2, r2, #22
 8001382:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0208 	orr.w	r2, r2, #8
 800139a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e005      	b.n	80013ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013b6:	2302      	movs	r3, #2
 80013b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013d2:	f7ff fe03 	bl	8000fdc <HAL_GetTick>
 80013d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d008      	beq.n	80013f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e052      	b.n	800149c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0216 	bic.w	r2, r2, #22
 8001404:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001414:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <HAL_DMA_Abort+0x62>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0208 	bic.w	r2, r2, #8
 8001434:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001446:	e013      	b.n	8001470 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001448:	f7ff fdc8 	bl	8000fdc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b05      	cmp	r3, #5
 8001454:	d90c      	bls.n	8001470 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2203      	movs	r2, #3
 8001460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e015      	b.n	800149c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1e4      	bne.n	8001448 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	223f      	movs	r2, #63	; 0x3f
 8001484:	409a      	lsls	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d004      	beq.n	80014c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00c      	b.n	80014dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2205      	movs	r2, #5
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014f4:	4b92      	ldr	r3, [pc, #584]	; (8001740 <HAL_DMA_IRQHandler+0x258>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a92      	ldr	r2, [pc, #584]	; (8001744 <HAL_DMA_IRQHandler+0x25c>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0a9b      	lsrs	r3, r3, #10
 8001500:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001512:	2208      	movs	r2, #8
 8001514:	409a      	lsls	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01a      	beq.n	8001554 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0204 	bic.w	r2, r2, #4
 800153a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	2208      	movs	r2, #8
 8001542:	409a      	lsls	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	2201      	movs	r2, #1
 800155a:	409a      	lsls	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d012      	beq.n	800158a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001576:	2201      	movs	r2, #1
 8001578:	409a      	lsls	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	f043 0202 	orr.w	r2, r3, #2
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158e:	2204      	movs	r2, #4
 8001590:	409a      	lsls	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d012      	beq.n	80015c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00b      	beq.n	80015c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	2204      	movs	r2, #4
 80015ae:	409a      	lsls	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b8:	f043 0204 	orr.w	r2, r3, #4
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	2210      	movs	r2, #16
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d043      	beq.n	8001658 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d03c      	beq.n	8001658 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	2210      	movs	r2, #16
 80015e4:	409a      	lsls	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d018      	beq.n	800162a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d108      	bne.n	8001618 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d024      	beq.n	8001658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
 8001616:	e01f      	b.n	8001658 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161c:	2b00      	cmp	r3, #0
 800161e:	d01b      	beq.n	8001658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
 8001628:	e016      	b.n	8001658 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d107      	bne.n	8001648 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0208 	bic.w	r2, r2, #8
 8001646:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	2220      	movs	r2, #32
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 808e 	beq.w	8001786 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8086 	beq.w	8001786 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2220      	movs	r2, #32
 8001680:	409a      	lsls	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b05      	cmp	r3, #5
 8001690:	d136      	bne.n	8001700 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0216 	bic.w	r2, r2, #22
 80016a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	695a      	ldr	r2, [r3, #20]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <HAL_DMA_IRQHandler+0x1da>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0208 	bic.w	r2, r2, #8
 80016d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	223f      	movs	r2, #63	; 0x3f
 80016d8:	409a      	lsls	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d07d      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
        }
        return;
 80016fe:	e078      	b.n	80017f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01c      	beq.n	8001748 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d108      	bne.n	800172e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	2b00      	cmp	r3, #0
 8001722:	d030      	beq.n	8001786 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
 800172c:	e02b      	b.n	8001786 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d027      	beq.n	8001786 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
 800173e:	e022      	b.n	8001786 <HAL_DMA_IRQHandler+0x29e>
 8001740:	20000000 	.word	0x20000000
 8001744:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0210 	bic.w	r2, r2, #16
 8001764:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178a:	2b00      	cmp	r3, #0
 800178c:	d032      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d022      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2205      	movs	r2, #5
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3301      	adds	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d307      	bcc.n	80017ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f2      	bne.n	80017b2 <HAL_DMA_IRQHandler+0x2ca>
 80017cc:	e000      	b.n	80017d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017ce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	4798      	blx	r3
 80017f0:	e000      	b.n	80017f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017f2:	bf00      	nop
    }
  }
}
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop

080017fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001818:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b40      	cmp	r3, #64	; 0x40
 8001828:	d108      	bne.n	800183c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800183a:	e007      	b.n	800184c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	60da      	str	r2, [r3, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	3b10      	subs	r3, #16
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <DMA_CalcBaseAndBitshift+0x64>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001872:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <DMA_CalcBaseAndBitshift+0x68>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b03      	cmp	r3, #3
 8001884:	d909      	bls.n	800189a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800188e:	f023 0303 	bic.w	r3, r3, #3
 8001892:	1d1a      	adds	r2, r3, #4
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	659a      	str	r2, [r3, #88]	; 0x58
 8001898:	e007      	b.n	80018aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018a2:	f023 0303 	bic.w	r3, r3, #3
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	aaaaaaab 	.word	0xaaaaaaab
 80018c0:	0800779c 	.word	0x0800779c

080018c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d11f      	bne.n	800191e <DMA_CheckFifoParam+0x5a>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d856      	bhi.n	8001992 <DMA_CheckFifoParam+0xce>
 80018e4:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <DMA_CheckFifoParam+0x28>)
 80018e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ea:	bf00      	nop
 80018ec:	080018fd 	.word	0x080018fd
 80018f0:	0800190f 	.word	0x0800190f
 80018f4:	080018fd 	.word	0x080018fd
 80018f8:	08001993 	.word	0x08001993
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d046      	beq.n	8001996 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800190c:	e043      	b.n	8001996 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001916:	d140      	bne.n	800199a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800191c:	e03d      	b.n	800199a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001926:	d121      	bne.n	800196c <DMA_CheckFifoParam+0xa8>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d837      	bhi.n	800199e <DMA_CheckFifoParam+0xda>
 800192e:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <DMA_CheckFifoParam+0x70>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	08001945 	.word	0x08001945
 8001938:	0800194b 	.word	0x0800194b
 800193c:	08001945 	.word	0x08001945
 8001940:	0800195d 	.word	0x0800195d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
      break;
 8001948:	e030      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d025      	beq.n	80019a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800195a:	e022      	b.n	80019a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001964:	d11f      	bne.n	80019a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800196a:	e01c      	b.n	80019a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d903      	bls.n	800197a <DMA_CheckFifoParam+0xb6>
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d003      	beq.n	8001980 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001978:	e018      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      break;
 800197e:	e015      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00e      	beq.n	80019aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
      break;
 8001990:	e00b      	b.n	80019aa <DMA_CheckFifoParam+0xe6>
      break;
 8001992:	bf00      	nop
 8001994:	e00a      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 8001996:	bf00      	nop
 8001998:	e008      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 800199a:	bf00      	nop
 800199c:	e006      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 800199e:	bf00      	nop
 80019a0:	e004      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 80019a2:	bf00      	nop
 80019a4:	e002      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;   
 80019a6:	bf00      	nop
 80019a8:	e000      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
    }
  } 
  
  return status; 
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e159      	b.n	8001c8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f040 8148 	bne.w	8001c86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d005      	beq.n	8001a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d017      	beq.n	8001aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d123      	bne.n	8001b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	69b9      	ldr	r1, [r7, #24]
 8001afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a2 	beq.w	8001c86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <HAL_GPIO_Init+0x2e8>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a56      	ldr	r2, [pc, #344]	; (8001ca4 <HAL_GPIO_Init+0x2e8>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b54      	ldr	r3, [pc, #336]	; (8001ca4 <HAL_GPIO_Init+0x2e8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5e:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_GPIO_Init+0x2ec>)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a49      	ldr	r2, [pc, #292]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x202>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a48      	ldr	r2, [pc, #288]	; (8001cb0 <HAL_GPIO_Init+0x2f4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x1fe>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a47      	ldr	r2, [pc, #284]	; (8001cb4 <HAL_GPIO_Init+0x2f8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x1fa>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a46      	ldr	r2, [pc, #280]	; (8001cb8 <HAL_GPIO_Init+0x2fc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x1f6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a45      	ldr	r2, [pc, #276]	; (8001cbc <HAL_GPIO_Init+0x300>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x1f2>
 8001baa:	2304      	movs	r3, #4
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd0:	4935      	ldr	r1, [pc, #212]	; (8001ca8 <HAL_GPIO_Init+0x2ec>)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bde:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c02:	4a2f      	ldr	r2, [pc, #188]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2c:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c56:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c80:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b0f      	cmp	r3, #15
 8001c90:	f67f aea2 	bls.w	80019d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e264      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d075      	beq.n	8001dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ce2:	4ba3      	ldr	r3, [pc, #652]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d00c      	beq.n	8001d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cee:	4ba0      	ldr	r3, [pc, #640]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d112      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfa:	4b9d      	ldr	r3, [pc, #628]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	4b99      	ldr	r3, [pc, #612]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d05b      	beq.n	8001dcc <HAL_RCC_OscConfig+0x108>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d157      	bne.n	8001dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e23f      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d106      	bne.n	8001d38 <HAL_RCC_OscConfig+0x74>
 8001d2a:	4b91      	ldr	r3, [pc, #580]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x98>
 8001d42:	4b8b      	ldr	r3, [pc, #556]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a8a      	ldr	r2, [pc, #552]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a87      	ldr	r2, [pc, #540]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d5c:	4b84      	ldr	r3, [pc, #528]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a83      	ldr	r2, [pc, #524]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a80      	ldr	r2, [pc, #512]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f92e 	bl	8000fdc <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f92a 	bl	8000fdc <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e204      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0xc0>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff f91a 	bl	8000fdc <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff f916 	bl	8000fdc <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1f0      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0xe8>
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d063      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dda:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001de6:	4b62      	ldr	r3, [pc, #392]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d11c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d116      	bne.n	8001e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x152>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e1c4      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b56      	ldr	r3, [pc, #344]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4952      	ldr	r1, [pc, #328]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	e03a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <HAL_RCC_OscConfig+0x2b0>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7ff f8cf 	bl	8000fdc <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e42:	f7ff f8cb 	bl	8000fdc <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1a5      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e60:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4940      	ldr	r1, [pc, #256]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e76:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_OscConfig+0x2b0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f8ae 	bl	8000fdc <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e84:	f7ff f8aa 	bl	8000fdc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e184      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d030      	beq.n	8001f10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d016      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_RCC_OscConfig+0x2b4>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f88e 	bl	8000fdc <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f88a 	bl	8000fdc <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e164      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x200>
 8001ee2:	e015      	b.n	8001f10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_OscConfig+0x2b4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff f877 	bl	8000fdc <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f873 	bl	8000fdc <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e14d      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a0 	beq.w	800205e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10f      	bne.n	8001f4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_OscConfig+0x2b8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d121      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_RCC_OscConfig+0x2b8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_RCC_OscConfig+0x2b8>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7ff f839 	bl	8000fdc <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	e011      	b.n	8001f92 <HAL_RCC_OscConfig+0x2ce>
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	42470000 	.word	0x42470000
 8001f78:	42470e80 	.word	0x42470e80
 8001f7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f80:	f7ff f82c 	bl	8000fdc <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e106      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <HAL_RCC_OscConfig+0x4e4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
 8001fa6:	4b81      	ldr	r3, [pc, #516]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a80      	ldr	r2, [pc, #512]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb2:	e01c      	b.n	8001fee <HAL_RCC_OscConfig+0x32a>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x312>
 8001fbc:	4b7b      	ldr	r3, [pc, #492]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	4a7a      	ldr	r2, [pc, #488]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc8:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a77      	ldr	r2, [pc, #476]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	e00b      	b.n	8001fee <HAL_RCC_OscConfig+0x32a>
 8001fd6:	4b75      	ldr	r3, [pc, #468]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	4a74      	ldr	r2, [pc, #464]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	4b72      	ldr	r3, [pc, #456]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a71      	ldr	r2, [pc, #452]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d015      	beq.n	8002022 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fff1 	bl	8000fdc <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe ffed 	bl	8000fdc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0c5      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	4b65      	ldr	r3, [pc, #404]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ee      	beq.n	8001ffe <HAL_RCC_OscConfig+0x33a>
 8002020:	e014      	b.n	800204c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7fe ffdb 	bl	8000fdc <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe ffd7 	bl	8000fdc <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0af      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	4b5a      	ldr	r3, [pc, #360]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	4b56      	ldr	r3, [pc, #344]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a55      	ldr	r2, [pc, #340]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8002058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 809b 	beq.w	800219e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d05c      	beq.n	800212e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d141      	bne.n	8002100 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCC_OscConfig+0x4ec>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe ffab 	bl	8000fdc <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe ffa7 	bl	8000fdc <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e081      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209c:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	019b      	lsls	r3, r3, #6
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	3b01      	subs	r3, #1
 80020c2:	041b      	lsls	r3, r3, #16
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	4937      	ldr	r1, [pc, #220]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d2:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <HAL_RCC_OscConfig+0x4ec>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe ff80 	bl	8000fdc <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe ff7c 	bl	8000fdc <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e056      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x41c>
 80020fe:	e04e      	b.n	800219e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_OscConfig+0x4ec>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe ff69 	bl	8000fdc <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210e:	f7fe ff65 	bl	8000fdc <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e03f      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002120:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x44a>
 800212c:	e037      	b.n	800219e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e032      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_RCC_OscConfig+0x4e8>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d028      	beq.n	800219a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d121      	bne.n	800219a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d11a      	bne.n	800219a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002170:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002172:	4293      	cmp	r3, r2
 8002174:	d111      	bne.n	800219a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d107      	bne.n	800219a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40007000 	.word	0x40007000
 80021ac:	40023800 	.word	0x40023800
 80021b0:	42470060 	.word	0x42470060

080021b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0cc      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c8:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d90c      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b65      	ldr	r3, [pc, #404]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b63      	ldr	r3, [pc, #396]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b8      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b59      	ldr	r3, [pc, #356]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a58      	ldr	r2, [pc, #352]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a52      	ldr	r2, [pc, #328]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800222a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222c:	4b50      	ldr	r3, [pc, #320]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	494d      	ldr	r1, [pc, #308]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d044      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d119      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e07f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d003      	beq.n	8002272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226e:	2b03      	cmp	r3, #3
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002272:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e067      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4934      	ldr	r1, [pc, #208]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fe9a 	bl	8000fdc <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fe96 	bl	8000fdc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e04f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d20c      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e032      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4916      	ldr	r1, [pc, #88]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	490e      	ldr	r1, [pc, #56]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233a:	f000 f821 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800233e:	4602      	mov	r2, r0
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	490a      	ldr	r1, [pc, #40]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	5ccb      	ldrb	r3, [r1, r3]
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1c8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fd00 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00
 8002370:	40023800 	.word	0x40023800
 8002374:	08007784 	.word	0x08007784
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002386:	2100      	movs	r1, #0
 8002388:	6079      	str	r1, [r7, #4]
 800238a:	2100      	movs	r1, #0
 800238c:	60f9      	str	r1, [r7, #12]
 800238e:	2100      	movs	r1, #0
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002392:	2100      	movs	r1, #0
 8002394:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002396:	4952      	ldr	r1, [pc, #328]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002398:	6889      	ldr	r1, [r1, #8]
 800239a:	f001 010c 	and.w	r1, r1, #12
 800239e:	2908      	cmp	r1, #8
 80023a0:	d00d      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x3e>
 80023a2:	2908      	cmp	r1, #8
 80023a4:	f200 8094 	bhi.w	80024d0 <HAL_RCC_GetSysClockFreq+0x150>
 80023a8:	2900      	cmp	r1, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0x32>
 80023ac:	2904      	cmp	r1, #4
 80023ae:	d003      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x38>
 80023b0:	e08e      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b2:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80023b4:	60bb      	str	r3, [r7, #8]
       break;
 80023b6:	e08e      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80023ba:	60bb      	str	r3, [r7, #8]
      break;
 80023bc:	e08b      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023be:	4948      	ldr	r1, [pc, #288]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80023c0:	6849      	ldr	r1, [r1, #4]
 80023c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80023c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c8:	4945      	ldr	r1, [pc, #276]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80023ca:	6849      	ldr	r1, [r1, #4]
 80023cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80023d0:	2900      	cmp	r1, #0
 80023d2:	d024      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d4:	4942      	ldr	r1, [pc, #264]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80023d6:	6849      	ldr	r1, [r1, #4]
 80023d8:	0989      	lsrs	r1, r1, #6
 80023da:	4608      	mov	r0, r1
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80023e4:	f04f 0500 	mov.w	r5, #0
 80023e8:	ea00 0204 	and.w	r2, r0, r4
 80023ec:	ea01 0305 	and.w	r3, r1, r5
 80023f0:	493d      	ldr	r1, [pc, #244]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80023f2:	fb01 f003 	mul.w	r0, r1, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	fb01 f102 	mul.w	r1, r1, r2
 80023fc:	1844      	adds	r4, r0, r1
 80023fe:	493a      	ldr	r1, [pc, #232]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002400:	fba2 0101 	umull	r0, r1, r2, r1
 8002404:	1863      	adds	r3, r4, r1
 8002406:	4619      	mov	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	461a      	mov	r2, r3
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	f7fd ff3e 	bl	8000290 <__aeabi_uldivmod>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4613      	mov	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e04a      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	461a      	mov	r2, r3
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	ea02 0400 	and.w	r4, r2, r0
 8002436:	ea03 0501 	and.w	r5, r3, r1
 800243a:	4620      	mov	r0, r4
 800243c:	4629      	mov	r1, r5
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	014b      	lsls	r3, r1, #5
 8002448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800244c:	0142      	lsls	r2, r0, #5
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	1b00      	subs	r0, r0, r4
 8002454:	eb61 0105 	sbc.w	r1, r1, r5
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	018b      	lsls	r3, r1, #6
 8002462:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002466:	0182      	lsls	r2, r0, #6
 8002468:	1a12      	subs	r2, r2, r0
 800246a:	eb63 0301 	sbc.w	r3, r3, r1
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	00d9      	lsls	r1, r3, #3
 8002478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800247c:	00d0      	lsls	r0, r2, #3
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	1912      	adds	r2, r2, r4
 8002484:	eb45 0303 	adc.w	r3, r5, r3
 8002488:	f04f 0000 	mov.w	r0, #0
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	0299      	lsls	r1, r3, #10
 8002492:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002496:	0290      	lsls	r0, r2, #10
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	f7fd fef2 	bl	8000290 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4613      	mov	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	60bb      	str	r3, [r7, #8]
      break;
 80024ce:	e002      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80024d2:	60bb      	str	r3, [r7, #8]
      break;
 80024d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d6:	68bb      	ldr	r3, [r7, #8]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	017d7840 	.word	0x017d7840

080024ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000

08002504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002508:	f7ff fff0 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0a9b      	lsrs	r3, r3, #10
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4903      	ldr	r1, [pc, #12]	; (8002528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	08007794 	.word	0x08007794

0800252c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002530:	f7ff ffdc 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0b5b      	lsrs	r3, r3, #13
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4903      	ldr	r1, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	08007794 	.word	0x08007794

08002554 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	220f      	movs	r2, #15
 8002562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_RCC_GetClockConfig+0x5c>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_GetClockConfig+0x5c>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	08db      	lsrs	r3, r3, #3
 800258e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_RCC_GetClockConfig+0x60>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0207 	and.w	r2, r3, #7
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	601a      	str	r2, [r3, #0]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40023c00 	.word	0x40023c00

080025b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e041      	b.n	800264e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f839 	bl	8002656 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f000 f9ca 	bl	8002990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d001      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e044      	b.n	800270e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_TIM_Base_Start_IT+0xb0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d018      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x6c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ae:	d013      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x6c>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <HAL_TIM_Base_Start_IT+0xb4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00e      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x6c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_TIM_Base_Start_IT+0xb8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d009      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x6c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_TIM_Base_Start_IT+0xbc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d004      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x6c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a16      	ldr	r2, [pc, #88]	; (800272c <HAL_TIM_Base_Start_IT+0xc0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d111      	bne.n	80026fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d010      	beq.n	800270c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fa:	e007      	b.n	800270c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40010000 	.word	0x40010000
 8002720:	40000400 	.word	0x40000400
 8002724:	40000800 	.word	0x40000800
 8002728:	40000c00 	.word	0x40000c00
 800272c:	40014000 	.word	0x40014000

08002730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d122      	bne.n	800278c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	d11b      	bne.n	800278c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0202 	mvn.w	r2, #2
 800275c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8ee 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8e0 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8f1 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d122      	bne.n	80027e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d11b      	bne.n	80027e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0204 	mvn.w	r2, #4
 80027b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8c4 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8b6 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8c7 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d122      	bne.n	8002834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0208 	mvn.w	r2, #8
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2204      	movs	r2, #4
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f89a 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f88c 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f89d 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b10      	cmp	r3, #16
 8002840:	d122      	bne.n	8002888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b10      	cmp	r3, #16
 800284e:	d11b      	bne.n	8002888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0210 	mvn.w	r2, #16
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2208      	movs	r2, #8
 800285e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f870 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 8002874:	e005      	b.n	8002882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f862 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f873 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10e      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0201 	mvn.w	r2, #1
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe f92a 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028be:	2b80      	cmp	r3, #128	; 0x80
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8e2 	bl	8002aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b40      	cmp	r3, #64	; 0x40
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d107      	bne.n	800290c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f838 	bl	800297c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b20      	cmp	r3, #32
 8002918:	d10e      	bne.n	8002938 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b20      	cmp	r3, #32
 8002926:	d107      	bne.n	8002938 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0220 	mvn.w	r2, #32
 8002930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8ac 	bl	8002a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <TIM_Base_SetConfig+0xe4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00f      	beq.n	80029c8 <TIM_Base_SetConfig+0x38>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d00b      	beq.n	80029c8 <TIM_Base_SetConfig+0x38>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a31      	ldr	r2, [pc, #196]	; (8002a78 <TIM_Base_SetConfig+0xe8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d007      	beq.n	80029c8 <TIM_Base_SetConfig+0x38>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <TIM_Base_SetConfig+0xec>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d003      	beq.n	80029c8 <TIM_Base_SetConfig+0x38>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <TIM_Base_SetConfig+0xf0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d108      	bne.n	80029da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <TIM_Base_SetConfig+0xe4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01b      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d017      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <TIM_Base_SetConfig+0xe8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <TIM_Base_SetConfig+0xec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00f      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <TIM_Base_SetConfig+0xf0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00b      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <TIM_Base_SetConfig+0xf4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <TIM_Base_SetConfig+0xf8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d003      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <TIM_Base_SetConfig+0xfc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d108      	bne.n	8002a2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <TIM_Base_SetConfig+0xe4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d103      	bne.n	8002a60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	615a      	str	r2, [r3, #20]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	40000c00 	.word	0x40000c00
 8002a84:	40014000 	.word	0x40014000
 8002a88:	40014400 	.word	0x40014400
 8002a8c:	40014800 	.word	0x40014800

08002a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e03f      	b.n	8002b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe f856 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 ff8d 	bl	8003a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b08a      	sub	sp, #40	; 0x28
 8002b56:	af02      	add	r7, sp, #8
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d17c      	bne.n	8002c6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_UART_Transmit+0x2c>
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e075      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_UART_Transmit+0x3e>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e06e      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2221      	movs	r2, #33	; 0x21
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ba6:	f7fe fa19 	bl	8000fdc <HAL_GetTick>
 8002baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	88fa      	ldrh	r2, [r7, #6]
 8002bb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc0:	d108      	bne.n	8002bd4 <HAL_UART_Transmit+0x82>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d104      	bne.n	8002bd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	e003      	b.n	8002bdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002be4:	e02a      	b.n	8002c3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fc49 	bl	8003488 <UART_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e036      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	3302      	adds	r3, #2
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	e007      	b.n	8002c2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1cf      	bne.n	8002be6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2140      	movs	r1, #64	; 0x40
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fc19 	bl	8003488 <UART_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e006      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e000      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
  }
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b08c      	sub	sp, #48	; 0x30
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	4613      	mov	r3, r2
 8002c82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d152      	bne.n	8002d36 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04b      	b.n	8002d38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e044      	b.n	8002d38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fc4e 	bl	8003564 <UART_Start_Receive_DMA>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d12c      	bne.n	8002d30 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d125      	bne.n	8002d2a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	617b      	str	r3, [r7, #20]
   return(result);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f043 0310 	orr.w	r3, r3, #16
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d14:	627a      	str	r2, [r7, #36]	; 0x24
 8002d16:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	6a39      	ldr	r1, [r7, #32]
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e5      	bne.n	8002cf4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002d28:	e002      	b.n	8002d30 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002d30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d34:	e000      	b.n	8002d38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3730      	adds	r7, #48	; 0x30
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b0ba      	sub	sp, #232	; 0xe8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_UART_IRQHandler+0x66>
 8002d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fd81 	bl	80038a6 <UART_Receive_IT>
      return;
 8002da4:	e256      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80de 	beq.w	8002f6c <HAL_UART_IRQHandler+0x22c>
 8002db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80d1 	beq.w	8002f6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_UART_IRQHandler+0xae>
 8002dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 0201 	orr.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_UART_IRQHandler+0xd2>
 8002dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f043 0202 	orr.w	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_UART_IRQHandler+0xf6>
 8002e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d011      	beq.n	8002e66 <HAL_UART_IRQHandler+0x126>
 8002e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f043 0208 	orr.w	r2, r3, #8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 81ed 	beq.w	800324a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_UART_IRQHandler+0x14e>
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fd0c 	bl	80038a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_UART_IRQHandler+0x17a>
 8002eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d04f      	beq.n	8002f5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fc14 	bl	80036e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d141      	bne.n	8002f52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3314      	adds	r3, #20
 8002ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3314      	adds	r3, #20
 8002ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002efa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1d9      	bne.n	8002ece <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d013      	beq.n	8002f4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	4a7d      	ldr	r2, [pc, #500]	; (800311c <HAL_UART_IRQHandler+0x3dc>)
 8002f28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fab8 	bl	80014a4 <HAL_DMA_Abort_IT>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f44:	4610      	mov	r0, r2
 8002f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e00e      	b.n	8002f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f99a 	bl	8003284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	e00a      	b.n	8002f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f996 	bl	8003284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	e006      	b.n	8002f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f992 	bl	8003284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f66:	e170      	b.n	800324a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	bf00      	nop
    return;
 8002f6a:	e16e      	b.n	800324a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 814a 	bne.w	800320a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8143 	beq.w	800320a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 813c 	beq.w	800320a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	f040 80b4 	bne.w	8003120 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8140 	beq.w	800324e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	f080 8139 	bcs.w	800324e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fee:	f000 8088 	beq.w	8003102 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800300c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800301e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800302a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1d9      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3314      	adds	r3, #20
 8003044:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800304e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3314      	adds	r3, #20
 800305e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003062:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003066:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800306a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e1      	bne.n	800303e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3314      	adds	r3, #20
 8003080:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800308a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3314      	adds	r3, #20
 800309a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800309e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030a6:	e841 2300 	strex	r3, r2, [r1]
 80030aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1e3      	bne.n	800307a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d2:	f023 0310 	bic.w	r3, r3, #16
 80030d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	330c      	adds	r3, #12
 80030e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80030e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e3      	bne.n	80030c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe f961 	bl	80013c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800310a:	b29b      	uxth	r3, r3
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	b29b      	uxth	r3, r3
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd fa78 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003118:	e099      	b.n	800324e <HAL_UART_IRQHandler+0x50e>
 800311a:	bf00      	nop
 800311c:	080037af 	.word	0x080037af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003128:	b29b      	uxth	r3, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 808b 	beq.w	8003252 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800313c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8086 	beq.w	8003252 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800315c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	330c      	adds	r3, #12
 8003166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800316a:	647a      	str	r2, [r7, #68]	; 0x44
 800316c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003172:	e841 2300 	strex	r3, r2, [r1]
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1e3      	bne.n	8003146 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3314      	adds	r3, #20
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	623b      	str	r3, [r7, #32]
   return(result);
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3314      	adds	r3, #20
 800319e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031a2:	633a      	str	r2, [r7, #48]	; 0x30
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e3      	bne.n	800317e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0310 	bic.w	r3, r3, #16
 80031da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031e8:	61fa      	str	r2, [r7, #28]
 80031ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	69b9      	ldr	r1, [r7, #24]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	617b      	str	r3, [r7, #20]
   return(result);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e3      	bne.n	80031c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd fa00 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003208:	e023      	b.n	8003252 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_UART_IRQHandler+0x4ea>
 8003216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fad7 	bl	80037d6 <UART_Transmit_IT>
    return;
 8003228:	e014      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800322a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00e      	beq.n	8003254 <HAL_UART_IRQHandler+0x514>
 8003236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb17 	bl	8003876 <UART_EndTransmit_IT>
    return;
 8003248:	e004      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
    return;
 800324a:	bf00      	nop
 800324c:	e002      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
      return;
 800324e:	bf00      	nop
 8003250:	e000      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
      return;
 8003252:	bf00      	nop
  }
}
 8003254:	37e8      	adds	r7, #232	; 0xe8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop

0800325c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b09c      	sub	sp, #112	; 0x70
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d172      	bne.n	800339a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80032b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b6:	2200      	movs	r2, #0
 80032b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032da:	65ba      	str	r2, [r7, #88]	; 0x58
 80032dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	667b      	str	r3, [r7, #100]	; 0x64
 8003306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800330e:	647a      	str	r2, [r7, #68]	; 0x44
 8003310:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800331c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3314      	adds	r3, #20
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	623b      	str	r3, [r7, #32]
   return(result);
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003338:	663b      	str	r3, [r7, #96]	; 0x60
 800333a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003342:	633a      	str	r2, [r7, #48]	; 0x30
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e5      	bne.n	8003322 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	2b01      	cmp	r3, #1
 8003364:	d119      	bne.n	800339a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	60fb      	str	r3, [r7, #12]
   return(result);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f023 0310 	bic.w	r3, r3, #16
 800337c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003386:	61fa      	str	r2, [r7, #28]
 8003388:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	69b9      	ldr	r1, [r7, #24]
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	617b      	str	r3, [r7, #20]
   return(result);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e5      	bne.n	8003366 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d106      	bne.n	80033b0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033a6:	4619      	mov	r1, r3
 80033a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80033aa:	f7fd f92d 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80033ae:	e002      	b.n	80033b6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80033b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80033b2:	f7ff ff53 	bl	800325c <HAL_UART_RxCpltCallback>
}
 80033b6:	bf00      	nop
 80033b8:	3770      	adds	r7, #112	; 0x70
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d108      	bne.n	80033e6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4619      	mov	r1, r3
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7fd f912 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80033e4:	e002      	b.n	80033ec <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff ff42 	bl	8003270 <HAL_UART_RxHalfCpltCallback>
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003410:	2b80      	cmp	r3, #128	; 0x80
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b21      	cmp	r3, #33	; 0x21
 8003426:	d108      	bne.n	800343a <UART_DMAError+0x46>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003434:	68b8      	ldr	r0, [r7, #8]
 8003436:	f000 f92f 	bl	8003698 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b22      	cmp	r3, #34	; 0x22
 800345a:	d108      	bne.n	800346e <UART_DMAError+0x7a>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2200      	movs	r2, #0
 8003466:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003468:	68b8      	ldr	r0, [r7, #8]
 800346a:	f000 f93d 	bl	80036e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800347a:	68b8      	ldr	r0, [r7, #8]
 800347c:	f7ff ff02 	bl	8003284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b090      	sub	sp, #64	; 0x40
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003498:	e050      	b.n	800353c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d04c      	beq.n	800353c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80034a8:	f7fd fd98 	bl	8000fdc <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d241      	bcs.n	800353c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	330c      	adds	r3, #12
 80034d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034d8:	637a      	str	r2, [r7, #52]	; 0x34
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e5      	bne.n	80034b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	613b      	str	r3, [r7, #16]
   return(result);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3314      	adds	r3, #20
 800350a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800350c:	623a      	str	r2, [r7, #32]
 800350e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	69f9      	ldr	r1, [r7, #28]
 8003512:	6a3a      	ldr	r2, [r7, #32]
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	61bb      	str	r3, [r7, #24]
   return(result);
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e5      	bne.n	80034ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e00f      	b.n	800355c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4013      	ands	r3, r2
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	429a      	cmp	r2, r3
 8003558:	d09f      	beq.n	800349a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3740      	adds	r7, #64	; 0x40
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b098      	sub	sp, #96	; 0x60
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2222      	movs	r2, #34	; 0x22
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	4a3e      	ldr	r2, [pc, #248]	; (800368c <UART_Start_Receive_DMA+0x128>)
 8003592:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	4a3d      	ldr	r2, [pc, #244]	; (8003690 <UART_Start_Receive_DMA+0x12c>)
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	4a3c      	ldr	r2, [pc, #240]	; (8003694 <UART_Start_Receive_DMA+0x130>)
 80035a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	2200      	movs	r2, #0
 80035aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80035ac:	f107 0308 	add.w	r3, r7, #8
 80035b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	f7fd fea6 	bl	8001314 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003606:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003608:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800360c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e5      	bne.n	80035e6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3314      	adds	r3, #20
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	657b      	str	r3, [r7, #84]	; 0x54
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3314      	adds	r3, #20
 8003638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800363a:	63ba      	str	r2, [r7, #56]	; 0x38
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e5      	bne.n	800361a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3314      	adds	r3, #20
 8003654:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	617b      	str	r3, [r7, #20]
   return(result);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003664:	653b      	str	r3, [r7, #80]	; 0x50
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800366e:	627a      	str	r2, [r7, #36]	; 0x24
 8003670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6a39      	ldr	r1, [r7, #32]
 8003674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	61fb      	str	r3, [r7, #28]
   return(result);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e5      	bne.n	800364e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3760      	adds	r7, #96	; 0x60
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	08003299 	.word	0x08003299
 8003690:	080033bf 	.word	0x080033bf
 8003694:	080033f5 	.word	0x080033f5

08003698 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	61ba      	str	r2, [r7, #24]
 80036c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	6979      	ldr	r1, [r7, #20]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	613b      	str	r3, [r7, #16]
   return(result);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e5      	bne.n	80036a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80036dc:	bf00      	nop
 80036de:	3724      	adds	r7, #36	; 0x24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b095      	sub	sp, #84	; 0x54
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003710:	643a      	str	r2, [r7, #64]	; 0x40
 8003712:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e5      	bne.n	80036f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3314      	adds	r3, #20
 800372a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	61fb      	str	r3, [r7, #28]
   return(result);
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	64bb      	str	r3, [r7, #72]	; 0x48
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3314      	adds	r3, #20
 8003742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003744:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800374a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	2b01      	cmp	r3, #1
 800375e:	d119      	bne.n	8003794 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f023 0310 	bic.w	r3, r3, #16
 8003776:	647b      	str	r3, [r7, #68]	; 0x44
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	330c      	adds	r3, #12
 800377e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003780:	61ba      	str	r2, [r7, #24]
 8003782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6979      	ldr	r1, [r7, #20]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	613b      	str	r3, [r7, #16]
   return(result);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e5      	bne.n	8003760 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037a2:	bf00      	nop
 80037a4:	3754      	adds	r7, #84	; 0x54
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff fd5b 	bl	8003284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b21      	cmp	r3, #33	; 0x21
 80037e8:	d13e      	bne.n	8003868 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d114      	bne.n	800381e <UART_Transmit_IT+0x48>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d110      	bne.n	800381e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003810:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	1c9a      	adds	r2, r3, #2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	621a      	str	r2, [r3, #32]
 800381c:	e008      	b.n	8003830 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6211      	str	r1, [r2, #32]
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29b      	uxth	r3, r3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4619      	mov	r1, r3
 800383e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10f      	bne.n	8003864 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003852:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003862:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fc ff2e 	bl	80006f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08c      	sub	sp, #48	; 0x30
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b22      	cmp	r3, #34	; 0x22
 80038b8:	f040 80ab 	bne.w	8003a12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c4:	d117      	bne.n	80038f6 <UART_Receive_IT+0x50>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d113      	bne.n	80038f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
 80038f4:	e026      	b.n	8003944 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	d007      	beq.n	800391a <UART_Receive_IT+0x74>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <UART_Receive_IT+0x82>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e008      	b.n	800393a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003934:	b2da      	uxtb	r2, r3
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29b      	uxth	r3, r3
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4619      	mov	r1, r3
 8003952:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003954:	2b00      	cmp	r3, #0
 8003956:	d15a      	bne.n	8003a0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0220 	bic.w	r2, r2, #32
 8003966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	2b01      	cmp	r3, #1
 8003996:	d135      	bne.n	8003a04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	613b      	str	r3, [r7, #16]
   return(result);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f023 0310 	bic.w	r3, r3, #16
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	623a      	str	r2, [r7, #32]
 80039c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	69f9      	ldr	r1, [r7, #28]
 80039c4:	6a3a      	ldr	r2, [r7, #32]
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e5      	bne.n	800399e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d10a      	bne.n	80039f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fc fe03 	bl	8000608 <HAL_UARTEx_RxEventCallback>
 8003a02:	e002      	b.n	8003a0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff fc29 	bl	800325c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e002      	b.n	8003a14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3730      	adds	r7, #48	; 0x30
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a20:	b09f      	sub	sp, #124	; 0x7c
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a32:	68d9      	ldr	r1, [r3, #12]
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	ea40 0301 	orr.w	r3, r0, r1
 8003a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a60:	f021 010c 	bic.w	r1, r1, #12
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7a:	6999      	ldr	r1, [r3, #24]
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	ea40 0301 	orr.w	r3, r0, r1
 8003a84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4bc5      	ldr	r3, [pc, #788]	; (8003da0 <UART_SetConfig+0x384>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d004      	beq.n	8003a9a <UART_SetConfig+0x7e>
 8003a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4bc3      	ldr	r3, [pc, #780]	; (8003da4 <UART_SetConfig+0x388>)
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d103      	bne.n	8003aa2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a9a:	f7fe fd47 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8003a9e:	6778      	str	r0, [r7, #116]	; 0x74
 8003aa0:	e002      	b.n	8003aa8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa2:	f7fe fd2f 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8003aa6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab0:	f040 80b6 	bne.w	8003c20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab6:	461c      	mov	r4, r3
 8003ab8:	f04f 0500 	mov.w	r5, #0
 8003abc:	4622      	mov	r2, r4
 8003abe:	462b      	mov	r3, r5
 8003ac0:	1891      	adds	r1, r2, r2
 8003ac2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ac4:	415b      	adcs	r3, r3
 8003ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003acc:	1912      	adds	r2, r2, r4
 8003ace:	eb45 0303 	adc.w	r3, r5, r3
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	00d9      	lsls	r1, r3, #3
 8003adc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ae0:	00d0      	lsls	r0, r2, #3
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	1911      	adds	r1, r2, r4
 8003ae8:	6639      	str	r1, [r7, #96]	; 0x60
 8003aea:	416b      	adcs	r3, r5
 8003aec:	667b      	str	r3, [r7, #100]	; 0x64
 8003aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	1891      	adds	r1, r2, r2
 8003afa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003afc:	415b      	adcs	r3, r3
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b08:	f7fc fbc2 	bl	8000290 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4ba5      	ldr	r3, [pc, #660]	; (8003da8 <UART_SetConfig+0x38c>)
 8003b12:	fba3 2302 	umull	r2, r3, r3, r2
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	011e      	lsls	r6, r3, #4
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1c:	461c      	mov	r4, r3
 8003b1e:	f04f 0500 	mov.w	r5, #0
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	1891      	adds	r1, r2, r2
 8003b28:	6339      	str	r1, [r7, #48]	; 0x30
 8003b2a:	415b      	adcs	r3, r3
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b32:	1912      	adds	r2, r2, r4
 8003b34:	eb45 0303 	adc.w	r3, r5, r3
 8003b38:	f04f 0000 	mov.w	r0, #0
 8003b3c:	f04f 0100 	mov.w	r1, #0
 8003b40:	00d9      	lsls	r1, r3, #3
 8003b42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b46:	00d0      	lsls	r0, r2, #3
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	1911      	adds	r1, r2, r4
 8003b4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b50:	416b      	adcs	r3, r5
 8003b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b62:	415b      	adcs	r3, r3
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b6e:	f7fc fb8f 	bl	8000290 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4b8c      	ldr	r3, [pc, #560]	; (8003da8 <UART_SetConfig+0x38c>)
 8003b78:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	2164      	movs	r1, #100	; 0x64
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	3332      	adds	r3, #50	; 0x32
 8003b8a:	4a87      	ldr	r2, [pc, #540]	; (8003da8 <UART_SetConfig+0x38c>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b98:	441e      	add	r6, r3
 8003b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	1894      	adds	r4, r2, r2
 8003ba8:	623c      	str	r4, [r7, #32]
 8003baa:	415b      	adcs	r3, r3
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bb2:	1812      	adds	r2, r2, r0
 8003bb4:	eb41 0303 	adc.w	r3, r1, r3
 8003bb8:	f04f 0400 	mov.w	r4, #0
 8003bbc:	f04f 0500 	mov.w	r5, #0
 8003bc0:	00dd      	lsls	r5, r3, #3
 8003bc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bc6:	00d4      	lsls	r4, r2, #3
 8003bc8:	4622      	mov	r2, r4
 8003bca:	462b      	mov	r3, r5
 8003bcc:	1814      	adds	r4, r2, r0
 8003bce:	653c      	str	r4, [r7, #80]	; 0x50
 8003bd0:	414b      	adcs	r3, r1
 8003bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	1891      	adds	r1, r2, r2
 8003be0:	61b9      	str	r1, [r7, #24]
 8003be2:	415b      	adcs	r3, r3
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bee:	f7fc fb4f 	bl	8000290 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4b6c      	ldr	r3, [pc, #432]	; (8003da8 <UART_SetConfig+0x38c>)
 8003bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	2164      	movs	r1, #100	; 0x64
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	3332      	adds	r3, #50	; 0x32
 8003c0a:	4a67      	ldr	r2, [pc, #412]	; (8003da8 <UART_SetConfig+0x38c>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	f003 0207 	and.w	r2, r3, #7
 8003c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4432      	add	r2, r6
 8003c1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c1e:	e0b9      	b.n	8003d94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c22:	461c      	mov	r4, r3
 8003c24:	f04f 0500 	mov.w	r5, #0
 8003c28:	4622      	mov	r2, r4
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	1891      	adds	r1, r2, r2
 8003c2e:	6139      	str	r1, [r7, #16]
 8003c30:	415b      	adcs	r3, r3
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c38:	1912      	adds	r2, r2, r4
 8003c3a:	eb45 0303 	adc.w	r3, r5, r3
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	00d9      	lsls	r1, r3, #3
 8003c48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c4c:	00d0      	lsls	r0, r2, #3
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	eb12 0804 	adds.w	r8, r2, r4
 8003c56:	eb43 0905 	adc.w	r9, r3, r5
 8003c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f04f 0100 	mov.w	r1, #0
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	008b      	lsls	r3, r1, #2
 8003c6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c72:	0082      	lsls	r2, r0, #2
 8003c74:	4640      	mov	r0, r8
 8003c76:	4649      	mov	r1, r9
 8003c78:	f7fc fb0a 	bl	8000290 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4b49      	ldr	r3, [pc, #292]	; (8003da8 <UART_SetConfig+0x38c>)
 8003c82:	fba3 2302 	umull	r2, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	011e      	lsls	r6, r3, #4
 8003c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	1894      	adds	r4, r2, r2
 8003c98:	60bc      	str	r4, [r7, #8]
 8003c9a:	415b      	adcs	r3, r3
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca2:	1812      	adds	r2, r2, r0
 8003ca4:	eb41 0303 	adc.w	r3, r1, r3
 8003ca8:	f04f 0400 	mov.w	r4, #0
 8003cac:	f04f 0500 	mov.w	r5, #0
 8003cb0:	00dd      	lsls	r5, r3, #3
 8003cb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cb6:	00d4      	lsls	r4, r2, #3
 8003cb8:	4622      	mov	r2, r4
 8003cba:	462b      	mov	r3, r5
 8003cbc:	1814      	adds	r4, r2, r0
 8003cbe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cc0:	414b      	adcs	r3, r1
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f04f 0100 	mov.w	r1, #0
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	008b      	lsls	r3, r1, #2
 8003cd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cdc:	0082      	lsls	r2, r0, #2
 8003cde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ce2:	f7fc fad5 	bl	8000290 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4b2f      	ldr	r3, [pc, #188]	; (8003da8 <UART_SetConfig+0x38c>)
 8003cec:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	2164      	movs	r1, #100	; 0x64
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	3332      	adds	r3, #50	; 0x32
 8003cfe:	4a2a      	ldr	r2, [pc, #168]	; (8003da8 <UART_SetConfig+0x38c>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d0a:	441e      	add	r6, r3
 8003d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f04f 0100 	mov.w	r1, #0
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	1894      	adds	r4, r2, r2
 8003d1a:	603c      	str	r4, [r7, #0]
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d24:	1812      	adds	r2, r2, r0
 8003d26:	eb41 0303 	adc.w	r3, r1, r3
 8003d2a:	f04f 0400 	mov.w	r4, #0
 8003d2e:	f04f 0500 	mov.w	r5, #0
 8003d32:	00dd      	lsls	r5, r3, #3
 8003d34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d38:	00d4      	lsls	r4, r2, #3
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	462b      	mov	r3, r5
 8003d3e:	eb12 0a00 	adds.w	sl, r2, r0
 8003d42:	eb43 0b01 	adc.w	fp, r3, r1
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	008b      	lsls	r3, r1, #2
 8003d5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d5e:	0082      	lsls	r2, r0, #2
 8003d60:	4650      	mov	r0, sl
 8003d62:	4659      	mov	r1, fp
 8003d64:	f7fc fa94 	bl	8000290 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <UART_SetConfig+0x38c>)
 8003d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2164      	movs	r1, #100	; 0x64
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <UART_SetConfig+0x38c>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4432      	add	r2, r6
 8003d92:	609a      	str	r2, [r3, #8]
}
 8003d94:	bf00      	nop
 8003d96:	377c      	adds	r7, #124	; 0x7c
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	40011000 	.word	0x40011000
 8003da4:	40011400 	.word	0x40011400
 8003da8:	51eb851f 	.word	0x51eb851f

08003dac <__NVIC_SetPriority>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	db0a      	blt.n	8003dd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	490c      	ldr	r1, [pc, #48]	; (8003df8 <__NVIC_SetPriority+0x4c>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	0112      	lsls	r2, r2, #4
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	440b      	add	r3, r1
 8003dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003dd4:	e00a      	b.n	8003dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4908      	ldr	r1, [pc, #32]	; (8003dfc <__NVIC_SetPriority+0x50>)
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3b04      	subs	r3, #4
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	440b      	add	r3, r1
 8003dea:	761a      	strb	r2, [r3, #24]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000e100 	.word	0xe000e100
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <SysTick_Handler+0x1c>)
 8003e06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003e08:	f001 ff48 	bl	8005c9c <xTaskGetSchedulerState>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d001      	beq.n	8003e16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003e12:	f002 fd31 	bl	8006878 <xPortSysTickHandler>
  }
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	e000e010 	.word	0xe000e010

08003e20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e24:	2100      	movs	r1, #0
 8003e26:	f06f 0004 	mvn.w	r0, #4
 8003e2a:	f7ff ffbf 	bl	8003dac <__NVIC_SetPriority>
#endif
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e3a:	f3ef 8305 	mrs	r3, IPSR
 8003e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e46:	f06f 0305 	mvn.w	r3, #5
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	e00c      	b.n	8003e68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <osKernelInitialize+0x44>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <osKernelInitialize+0x44>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	e002      	b.n	8003e68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e68:	687b      	ldr	r3, [r7, #4]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000098 	.word	0x20000098

08003e7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e82:	f3ef 8305 	mrs	r3, IPSR
 8003e86:	603b      	str	r3, [r7, #0]
  return(result);
 8003e88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e8e:	f06f 0305 	mvn.w	r3, #5
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	e010      	b.n	8003eb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <osKernelStart+0x48>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d109      	bne.n	8003eb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e9e:	f7ff ffbf 	bl	8003e20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <osKernelStart+0x48>)
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ea8:	f001 fab0 	bl	800540c <vTaskStartScheduler>
      stat = osOK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	607b      	str	r3, [r7, #4]
 8003eb0:	e002      	b.n	8003eb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003eb8:	687b      	ldr	r3, [r7, #4]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000098 	.word	0x20000098

08003ec8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08e      	sub	sp, #56	; 0x38
 8003ecc:	af04      	add	r7, sp, #16
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed8:	f3ef 8305 	mrs	r3, IPSR
 8003edc:	617b      	str	r3, [r7, #20]
  return(result);
 8003ede:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d17e      	bne.n	8003fe2 <osThreadNew+0x11a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d07b      	beq.n	8003fe2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003eee:	2318      	movs	r3, #24
 8003ef0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d045      	beq.n	8003f8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <osThreadNew+0x48>
        name = attr->name;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <osThreadNew+0x6e>
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b38      	cmp	r3, #56	; 0x38
 8003f28:	d805      	bhi.n	8003f36 <osThreadNew+0x6e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <osThreadNew+0x72>
        return (NULL);
 8003f36:	2300      	movs	r3, #0
 8003f38:	e054      	b.n	8003fe4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00e      	beq.n	8003f70 <osThreadNew+0xa8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b5b      	cmp	r3, #91	; 0x5b
 8003f58:	d90a      	bls.n	8003f70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <osThreadNew+0xa8>
        mem = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e010      	b.n	8003f92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10c      	bne.n	8003f92 <osThreadNew+0xca>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d108      	bne.n	8003f92 <osThreadNew+0xca>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <osThreadNew+0xca>
          mem = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	e001      	b.n	8003f92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d110      	bne.n	8003fba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fa0:	9202      	str	r2, [sp, #8]
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f001 f856 	bl	8005060 <xTaskCreateStatic>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e013      	b.n	8003fe2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d110      	bne.n	8003fe2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	f107 0310 	add.w	r3, r7, #16
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f001 f8a1 	bl	800511a <xTaskCreate>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d001      	beq.n	8003fe2 <osThreadNew+0x11a>
            hTask = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fe2:	693b      	ldr	r3, [r7, #16]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff4:	f3ef 8305 	mrs	r3, IPSR
 8003ff8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <osDelay+0x1c>
    stat = osErrorISR;
 8004000:	f06f 0305 	mvn.w	r3, #5
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e007      	b.n	8004018 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f001 f9c6 	bl	80053a4 <vTaskDelay>
    }
  }

  return (stat);
 8004018:	68fb      	ldr	r3, [r7, #12]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004022:	b580      	push	{r7, lr}
 8004024:	b08a      	sub	sp, #40	; 0x28
 8004026:	af02      	add	r7, sp, #8
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004032:	f3ef 8305 	mrs	r3, IPSR
 8004036:	613b      	str	r3, [r7, #16]
  return(result);
 8004038:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800403a:	2b00      	cmp	r3, #0
 800403c:	d175      	bne.n	800412a <osSemaphoreNew+0x108>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d072      	beq.n	800412a <osSemaphoreNew+0x108>
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	429a      	cmp	r2, r3
 800404a:	d86e      	bhi.n	800412a <osSemaphoreNew+0x108>
    mem = -1;
 800404c:	f04f 33ff 	mov.w	r3, #4294967295
 8004050:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d006      	beq.n	800406e <osSemaphoreNew+0x4c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b4f      	cmp	r3, #79	; 0x4f
 8004066:	d902      	bls.n	800406e <osSemaphoreNew+0x4c>
        mem = 1;
 8004068:	2301      	movs	r3, #1
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e00c      	b.n	8004088 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d108      	bne.n	8004088 <osSemaphoreNew+0x66>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <osSemaphoreNew+0x66>
          mem = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	e001      	b.n	8004088 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d04c      	beq.n	800412a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d128      	bne.n	80040e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d10a      	bne.n	80040b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2203      	movs	r2, #3
 80040a2:	9200      	str	r2, [sp, #0]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2100      	movs	r1, #0
 80040a8:	2001      	movs	r0, #1
 80040aa:	f000 f9d7 	bl	800445c <xQueueGenericCreateStatic>
 80040ae:	61f8      	str	r0, [r7, #28]
 80040b0:	e005      	b.n	80040be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80040b2:	2203      	movs	r2, #3
 80040b4:	2100      	movs	r1, #0
 80040b6:	2001      	movs	r0, #1
 80040b8:	f000 fa48 	bl	800454c <xQueueGenericCreate>
 80040bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d022      	beq.n	800410a <osSemaphoreNew+0xe8>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01f      	beq.n	800410a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80040ca:	2300      	movs	r3, #0
 80040cc:	2200      	movs	r2, #0
 80040ce:	2100      	movs	r1, #0
 80040d0:	69f8      	ldr	r0, [r7, #28]
 80040d2:	f000 fb03 	bl	80046dc <xQueueGenericSend>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d016      	beq.n	800410a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80040dc:	69f8      	ldr	r0, [r7, #28]
 80040de:	f000 fe03 	bl	8004ce8 <vQueueDelete>
            hSemaphore = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e010      	b.n	800410a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d108      	bne.n	8004100 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fa85 	bl	8004606 <xQueueCreateCountingSemaphoreStatic>
 80040fc:	61f8      	str	r0, [r7, #28]
 80040fe:	e004      	b.n	800410a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fab6 	bl	8004674 <xQueueCreateCountingSemaphore>
 8004108:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <osSemaphoreNew+0xfc>
          name = attr->name;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	e001      	b.n	8004122 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004122:	6979      	ldr	r1, [r7, #20]
 8004124:	69f8      	ldr	r0, [r7, #28]
 8004126:	f000 ff13 	bl	8004f50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800412a:	69fb      	ldr	r3, [r7, #28]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d103      	bne.n	8004152 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800414a:	f06f 0303 	mvn.w	r3, #3
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	e02c      	b.n	80041ac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004152:	f3ef 8305 	mrs	r3, IPSR
 8004156:	60fb      	str	r3, [r7, #12]
  return(result);
 8004158:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01a      	beq.n	8004194 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004162:	f107 0308 	add.w	r3, r7, #8
 8004166:	4619      	mov	r1, r3
 8004168:	6938      	ldr	r0, [r7, #16]
 800416a:	f000 fc50 	bl	8004a0e <xQueueGiveFromISR>
 800416e:	4603      	mov	r3, r0
 8004170:	2b01      	cmp	r3, #1
 8004172:	d003      	beq.n	800417c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004174:	f06f 0302 	mvn.w	r3, #2
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e017      	b.n	80041ac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d014      	beq.n	80041ac <osSemaphoreRelease+0x78>
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <osSemaphoreRelease+0x84>)
 8004184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	e00b      	b.n	80041ac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004194:	2300      	movs	r3, #0
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	6938      	ldr	r0, [r7, #16]
 800419c:	f000 fa9e 	bl	80046dc <xQueueGenericSend>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d002      	beq.n	80041ac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80041a6:	f06f 0302 	mvn.w	r3, #2
 80041aa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80041ac:	697b      	ldr	r3, [r7, #20]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80041cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4a06      	ldr	r2, [pc, #24]	; (80041ec <vApplicationGetIdleTaskMemory+0x30>)
 80041d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000009c 	.word	0x2000009c
 80041ec:	200000f8 	.word	0x200000f8

080041f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <vApplicationGetTimerTaskMemory+0x2c>)
 8004200:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4a06      	ldr	r2, [pc, #24]	; (8004220 <vApplicationGetTimerTaskMemory+0x30>)
 8004206:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800420e:	601a      	str	r2, [r3, #0]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	200002f8 	.word	0x200002f8
 8004220:	20000354 	.word	0x20000354

08004224 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f103 0208 	add.w	r2, r3, #8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f103 0208 	add.w	r2, r3, #8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f103 0208 	add.w	r2, r3, #8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d103      	bne.n	80042e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e00c      	b.n	8004300 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3308      	adds	r3, #8
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e002      	b.n	80042f4 <vListInsert+0x2e>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d2f6      	bcs.n	80042ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	601a      	str	r2, [r3, #0]
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6892      	ldr	r2, [r2, #8]
 800434e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6852      	ldr	r2, [r2, #4]
 8004358:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	429a      	cmp	r2, r3
 8004362:	d103      	bne.n	800436c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	1e5a      	subs	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043b6:	f002 f9cd 	bl	8006754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	68f9      	ldr	r1, [r7, #12]
 80043c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	441a      	add	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	3b01      	subs	r3, #1
 80043e8:	68f9      	ldr	r1, [r7, #12]
 80043ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	441a      	add	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	22ff      	movs	r2, #255	; 0xff
 80043fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	22ff      	movs	r2, #255	; 0xff
 8004402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d114      	bne.n	8004436 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01a      	beq.n	800444a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3310      	adds	r3, #16
 8004418:	4618      	mov	r0, r3
 800441a:	f001 fa81 	bl	8005920 <xTaskRemoveFromEventList>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d012      	beq.n	800444a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <xQueueGenericReset+0xcc>)
 8004426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	e009      	b.n	800444a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3310      	adds	r3, #16
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fef2 	bl	8004224 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3324      	adds	r3, #36	; 0x24
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff feed 	bl	8004224 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800444a:	f002 f9b3 	bl	80067b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800444e:	2301      	movs	r3, #1
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08e      	sub	sp, #56	; 0x38
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <xQueueGenericCreateStatic+0x52>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <xQueueGenericCreateStatic+0x56>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <xQueueGenericCreateStatic+0x58>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	623b      	str	r3, [r7, #32]
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <xQueueGenericCreateStatic+0x7e>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <xQueueGenericCreateStatic+0x82>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <xQueueGenericCreateStatic+0x84>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	61fb      	str	r3, [r7, #28]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044fa:	2350      	movs	r3, #80	; 0x50
 80044fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b50      	cmp	r3, #80	; 0x50
 8004502:	d00a      	beq.n	800451a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	61bb      	str	r3, [r7, #24]
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800451a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800452e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	4613      	mov	r3, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f83f 	bl	80045c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004544:	4618      	mov	r0, r3
 8004546:	3730      	adds	r7, #48	; 0x30
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	613b      	str	r3, [r7, #16]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	3350      	adds	r3, #80	; 0x50
 8004584:	4618      	mov	r0, r3
 8004586:	f002 fa07 	bl	8006998 <pvPortMalloc>
 800458a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d011      	beq.n	80045b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	3350      	adds	r3, #80	; 0x50
 800459a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045a4:	79fa      	ldrb	r2, [r7, #7]
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f805 	bl	80045c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045b6:	69bb      	ldr	r3, [r7, #24]
	}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e002      	b.n	80045e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045ee:	2101      	movs	r1, #1
 80045f0:	69b8      	ldr	r0, [r7, #24]
 80045f2:	f7ff fecb 	bl	800438c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004606:	b580      	push	{r7, lr}
 8004608:	b08a      	sub	sp, #40	; 0x28
 800460a:	af02      	add	r7, sp, #8
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	61bb      	str	r3, [r7, #24]
}
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	429a      	cmp	r2, r3
 8004634:	d90a      	bls.n	800464c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	617b      	str	r3, [r7, #20]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800464c:	2302      	movs	r3, #2
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	2100      	movs	r1, #0
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff ff00 	bl	800445c <xQueueGenericCreateStatic>
 800465c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800466a:	69fb      	ldr	r3, [r7, #28]
	}
 800466c:	4618      	mov	r0, r3
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	613b      	str	r3, [r7, #16]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d90a      	bls.n	80046b8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60fb      	str	r3, [r7, #12]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80046b8:	2202      	movs	r2, #2
 80046ba:	2100      	movs	r1, #0
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff45 	bl	800454c <xQueueGenericCreate>
 80046c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80046d0:	697b      	ldr	r3, [r7, #20]
	}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08e      	sub	sp, #56	; 0x38
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046ea:	2300      	movs	r3, #0
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xQueueGenericSend+0x32>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d103      	bne.n	800471c <xQueueGenericSend+0x40>
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <xQueueGenericSend+0x44>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <xQueueGenericSend+0x46>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <xQueueGenericSend+0x60>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d103      	bne.n	800474a <xQueueGenericSend+0x6e>
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <xQueueGenericSend+0x72>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <xQueueGenericSend+0x74>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xQueueGenericSend+0x8e>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	623b      	str	r3, [r7, #32]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800476a:	f001 fa97 	bl	8005c9c <xTaskGetSchedulerState>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <xQueueGenericSend+0x9e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <xQueueGenericSend+0xa2>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <xQueueGenericSend+0xa4>
 800477e:	2300      	movs	r3, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <xQueueGenericSend+0xbe>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	61fb      	str	r3, [r7, #28]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800479a:	f001 ffdb 	bl	8006754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d302      	bcc.n	80047b0 <xQueueGenericSend+0xd4>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d129      	bne.n	8004804 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b6:	f000 faba 	bl	8004d2e <prvCopyDataToQueue>
 80047ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d010      	beq.n	80047e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	3324      	adds	r3, #36	; 0x24
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 f8a9 	bl	8005920 <xTaskRemoveFromEventList>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <xQueueGenericSend+0x1f8>)
 80047d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	e00a      	b.n	80047fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047ec:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <xQueueGenericSend+0x1f8>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047fc:	f001 ffda 	bl	80067b4 <vPortExitCritical>
				return pdPASS;
 8004800:	2301      	movs	r3, #1
 8004802:	e063      	b.n	80048cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800480a:	f001 ffd3 	bl	80067b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800480e:	2300      	movs	r3, #0
 8004810:	e05c      	b.n	80048cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f8e3 	bl	80059e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004822:	2301      	movs	r3, #1
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004826:	f001 ffc5 	bl	80067b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800482a:	f000 fe55 	bl	80054d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800482e:	f001 ff91 	bl	8006754 <vPortEnterCritical>
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004838:	b25b      	sxtb	r3, r3
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d103      	bne.n	8004848 <xQueueGenericSend+0x16c>
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800484e:	b25b      	sxtb	r3, r3
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d103      	bne.n	800485e <xQueueGenericSend+0x182>
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800485e:	f001 ffa9 	bl	80067b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004862:	1d3a      	adds	r2, r7, #4
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f001 f8d2 	bl	8005a14 <xTaskCheckForTimeOut>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d124      	bne.n	80048c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004878:	f000 fb51 	bl	8004f1e <prvIsQueueFull>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d018      	beq.n	80048b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	3310      	adds	r3, #16
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fff8 	bl	8005880 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004892:	f000 fadc 	bl	8004e4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004896:	f000 fe2d 	bl	80054f4 <xTaskResumeAll>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	f47f af7c 	bne.w	800479a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <xQueueGenericSend+0x1f8>)
 80048a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	e772      	b.n	800479a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b6:	f000 faca 	bl	8004e4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048ba:	f000 fe1b 	bl	80054f4 <xTaskResumeAll>
 80048be:	e76c      	b.n	800479a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048c2:	f000 fac4 	bl	8004e4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048c6:	f000 fe15 	bl	80054f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3738      	adds	r7, #56	; 0x38
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b090      	sub	sp, #64	; 0x40
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <xQueueGenericSendFromISR+0x3c>
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <xQueueGenericSendFromISR+0x40>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <xQueueGenericSendFromISR+0x42>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004930:	bf00      	nop
 8004932:	e7fe      	b.n	8004932 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d103      	bne.n	8004942 <xQueueGenericSendFromISR+0x6a>
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <xQueueGenericSendFromISR+0x6e>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <xQueueGenericSendFromISR+0x70>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	623b      	str	r3, [r7, #32]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004962:	f001 ffd9 	bl	8006918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004966:	f3ef 8211 	mrs	r2, BASEPRI
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	61fa      	str	r2, [r7, #28]
 800497c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800497e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <xQueueGenericSendFromISR+0xbc>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d12f      	bne.n	80049f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800499a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049aa:	f000 f9c0 	bl	8004d2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d112      	bne.n	80049de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d016      	beq.n	80049ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 ffab 	bl	8005920 <xTaskRemoveFromEventList>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00e      	beq.n	80049ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e007      	b.n	80049ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049e2:	3301      	adds	r3, #1
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	b25a      	sxtb	r2, r3
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049ee:	2301      	movs	r3, #1
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80049f2:	e001      	b.n	80049f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3740      	adds	r7, #64	; 0x40
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b08e      	sub	sp, #56	; 0x38
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	623b      	str	r3, [r7, #32]
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61fb      	str	r3, [r7, #28]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <xQueueGiveFromISR+0x58>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <xQueueGiveFromISR+0x5c>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueGiveFromISR+0x5e>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61bb      	str	r3, [r7, #24]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a86:	f001 ff47 	bl	8006918 <vPortValidateInterruptPriority>
	__asm volatile
 8004a8a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	617a      	str	r2, [r7, #20]
 8004aa0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004aa2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d22b      	bcs.n	8004b0e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d112      	bne.n	8004af8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	3324      	adds	r3, #36	; 0x24
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 ff1e 	bl	8005920 <xTaskRemoveFromEventList>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00e      	beq.n	8004b08 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e007      	b.n	8004b08 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004afc:	3301      	adds	r3, #1
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	b25a      	sxtb	r2, r3
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0c:	e001      	b.n	8004b12 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f383 8811 	msr	BASEPRI, r3
}
 8004b1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3738      	adds	r7, #56	; 0x38
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08c      	sub	sp, #48	; 0x30
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <xQueueReceive+0x30>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	623b      	str	r3, [r7, #32]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <xQueueReceive+0x3e>
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <xQueueReceive+0x42>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <xQueueReceive+0x44>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xQueueReceive+0x5e>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	61fb      	str	r3, [r7, #28]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b86:	f001 f889 	bl	8005c9c <xTaskGetSchedulerState>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <xQueueReceive+0x6e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <xQueueReceive+0x72>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <xQueueReceive+0x74>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <xQueueReceive+0x8e>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	61bb      	str	r3, [r7, #24]
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bb6:	f001 fdcd 	bl	8006754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01f      	beq.n	8004c06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bca:	f000 f91a 	bl	8004e02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	1e5a      	subs	r2, r3, #1
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00f      	beq.n	8004bfe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	3310      	adds	r3, #16
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fe9c 	bl	8005920 <xTaskRemoveFromEventList>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bee:	4b3d      	ldr	r3, [pc, #244]	; (8004ce4 <xQueueReceive+0x1bc>)
 8004bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bfe:	f001 fdd9 	bl	80067b4 <vPortExitCritical>
				return pdPASS;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e069      	b.n	8004cda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c0c:	f001 fdd2 	bl	80067b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c10:	2300      	movs	r3, #0
 8004c12:	e062      	b.n	8004cda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c1a:	f107 0310 	add.w	r3, r7, #16
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fee2 	bl	80059e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c28:	f001 fdc4 	bl	80067b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c2c:	f000 fc54 	bl	80054d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c30:	f001 fd90 	bl	8006754 <vPortEnterCritical>
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c3a:	b25b      	sxtb	r3, r3
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d103      	bne.n	8004c4a <xQueueReceive+0x122>
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c50:	b25b      	sxtb	r3, r3
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	d103      	bne.n	8004c60 <xQueueReceive+0x138>
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c60:	f001 fda8 	bl	80067b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c64:	1d3a      	adds	r2, r7, #4
 8004c66:	f107 0310 	add.w	r3, r7, #16
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fed1 	bl	8005a14 <xTaskCheckForTimeOut>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d123      	bne.n	8004cc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c7a:	f000 f93a 	bl	8004ef2 <prvIsQueueEmpty>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d017      	beq.n	8004cb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	3324      	adds	r3, #36	; 0x24
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fdf7 	bl	8005880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c94:	f000 f8db 	bl	8004e4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c98:	f000 fc2c 	bl	80054f4 <xTaskResumeAll>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d189      	bne.n	8004bb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ca2:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <xQueueReceive+0x1bc>)
 8004ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	e780      	b.n	8004bb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb6:	f000 f8ca 	bl	8004e4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cba:	f000 fc1b 	bl	80054f4 <xTaskResumeAll>
 8004cbe:	e77a      	b.n	8004bb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc2:	f000 f8c4 	bl	8004e4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cc6:	f000 fc15 	bl	80054f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ccc:	f000 f911 	bl	8004ef2 <prvIsQueueEmpty>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f43f af6f 	beq.w	8004bb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3730      	adds	r7, #48	; 0x30
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10a      	bne.n	8004d10 <vQueueDelete+0x28>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60bb      	str	r3, [r7, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f947 	bl	8004fa4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d102      	bne.n	8004d26 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f001 ff05 	bl	8006b30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10d      	bne.n	8004d68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d14d      	bne.n	8004df0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 ffbd 	bl	8005cd8 <xTaskPriorityDisinherit>
 8004d5e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	609a      	str	r2, [r3, #8]
 8004d66:	e043      	b.n	8004df0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d119      	bne.n	8004da2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6858      	ldr	r0, [r3, #4]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	461a      	mov	r2, r3
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	f002 f821 	bl	8006dc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	441a      	add	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d32b      	bcc.n	8004df0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	605a      	str	r2, [r3, #4]
 8004da0:	e026      	b.n	8004df0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68d8      	ldr	r0, [r3, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	461a      	mov	r2, r3
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	f002 f807 	bl	8006dc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	425b      	negs	r3, r3
 8004dbc:	441a      	add	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d207      	bcs.n	8004dde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	425b      	negs	r3, r3
 8004dd8:	441a      	add	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d105      	bne.n	8004df0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004df8:	697b      	ldr	r3, [r7, #20]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d018      	beq.n	8004e46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	441a      	add	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d303      	bcc.n	8004e36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	461a      	mov	r2, r3
 8004e40:	6838      	ldr	r0, [r7, #0]
 8004e42:	f001 ffbd 	bl	8006dc0 <memcpy>
	}
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e56:	f001 fc7d 	bl	8006754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e62:	e011      	b.n	8004e88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d012      	beq.n	8004e92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3324      	adds	r3, #36	; 0x24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fd55 	bl	8005920 <xTaskRemoveFromEventList>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e7c:	f000 fe2c 	bl	8005ad8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	dce9      	bgt.n	8004e64 <prvUnlockQueue+0x16>
 8004e90:	e000      	b.n	8004e94 <prvUnlockQueue+0x46>
					break;
 8004e92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	22ff      	movs	r2, #255	; 0xff
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e9c:	f001 fc8a 	bl	80067b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ea0:	f001 fc58 	bl	8006754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eaa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eac:	e011      	b.n	8004ed2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d012      	beq.n	8004edc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3310      	adds	r3, #16
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fd30 	bl	8005920 <xTaskRemoveFromEventList>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ec6:	f000 fe07 	bl	8005ad8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004eca:	7bbb      	ldrb	r3, [r7, #14]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dce9      	bgt.n	8004eae <prvUnlockQueue+0x60>
 8004eda:	e000      	b.n	8004ede <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004edc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	22ff      	movs	r2, #255	; 0xff
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ee6:	f001 fc65 	bl	80067b4 <vPortExitCritical>
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004efa:	f001 fc2b 	bl	8006754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f06:	2301      	movs	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	e001      	b.n	8004f10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f10:	f001 fc50 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8004f14:	68fb      	ldr	r3, [r7, #12]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f26:	f001 fc15 	bl	8006754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d102      	bne.n	8004f3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f36:	2301      	movs	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e001      	b.n	8004f40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f40:	f001 fc38 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8004f44:	68fb      	ldr	r3, [r7, #12]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e014      	b.n	8004f8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f60:	4a0f      	ldr	r2, [pc, #60]	; (8004fa0 <vQueueAddToRegistry+0x50>)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f6c:	490c      	ldr	r1, [pc, #48]	; (8004fa0 <vQueueAddToRegistry+0x50>)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f76:	4a0a      	ldr	r2, [pc, #40]	; (8004fa0 <vQueueAddToRegistry+0x50>)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f82:	e006      	b.n	8004f92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b07      	cmp	r3, #7
 8004f8e:	d9e7      	bls.n	8004f60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	2000584c 	.word	0x2000584c

08004fa4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e016      	b.n	8004fe0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004fb2:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <vQueueUnregisterQueue+0x50>)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d10b      	bne.n	8004fda <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004fc2:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <vQueueUnregisterQueue+0x50>)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004fcc:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vQueueUnregisterQueue+0x50>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	605a      	str	r2, [r3, #4]
				break;
 8004fd8:	e006      	b.n	8004fe8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b07      	cmp	r3, #7
 8004fe4:	d9e5      	bls.n	8004fb2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	2000584c 	.word	0x2000584c

08004ff8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005008:	f001 fba4 	bl	8006754 <vPortEnterCritical>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005012:	b25b      	sxtb	r3, r3
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d103      	bne.n	8005022 <vQueueWaitForMessageRestricted+0x2a>
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005028:	b25b      	sxtb	r3, r3
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d103      	bne.n	8005038 <vQueueWaitForMessageRestricted+0x40>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005038:	f001 fbbc 	bl	80067b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3324      	adds	r3, #36	; 0x24
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fc3b 	bl	80058c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005052:	6978      	ldr	r0, [r7, #20]
 8005054:	f7ff fefb 	bl	8004e4e <prvUnlockQueue>
	}
 8005058:	bf00      	nop
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	; 0x38
 8005064:	af04      	add	r7, sp, #16
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	623b      	str	r3, [r7, #32]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	61fb      	str	r3, [r7, #28]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050a6:	235c      	movs	r3, #92	; 0x5c
 80050a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b5c      	cmp	r3, #92	; 0x5c
 80050ae:	d00a      	beq.n	80050c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	61bb      	str	r3, [r7, #24]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01e      	beq.n	800510c <xTaskCreateStatic+0xac>
 80050ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01b      	beq.n	800510c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050e6:	2300      	movs	r3, #0
 80050e8:	9303      	str	r3, [sp, #12]
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	9302      	str	r3, [sp, #8]
 80050ee:	f107 0314 	add.w	r3, r7, #20
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f850 	bl	80051a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005106:	f000 f8dd 	bl	80052c4 <prvAddNewTaskToReadyList>
 800510a:	e001      	b.n	8005110 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005110:	697b      	ldr	r3, [r7, #20]
	}
 8005112:	4618      	mov	r0, r3
 8005114:	3728      	adds	r7, #40	; 0x28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800511a:	b580      	push	{r7, lr}
 800511c:	b08c      	sub	sp, #48	; 0x30
 800511e:	af04      	add	r7, sp, #16
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4618      	mov	r0, r3
 8005130:	f001 fc32 	bl	8006998 <pvPortMalloc>
 8005134:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00e      	beq.n	800515a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800513c:	205c      	movs	r0, #92	; 0x5c
 800513e:	f001 fc2b 	bl	8006998 <pvPortMalloc>
 8005142:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
 8005150:	e005      	b.n	800515e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005152:	6978      	ldr	r0, [r7, #20]
 8005154:	f001 fcec 	bl	8006b30 <vPortFree>
 8005158:	e001      	b.n	800515e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d017      	beq.n	8005194 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	2300      	movs	r3, #0
 8005170:	9303      	str	r3, [sp, #12]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	9302      	str	r3, [sp, #8]
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f80e 	bl	80051a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005188:	69f8      	ldr	r0, [r7, #28]
 800518a:	f000 f89b 	bl	80052c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800518e:	2301      	movs	r3, #1
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e002      	b.n	800519a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005194:	f04f 33ff 	mov.w	r3, #4294967295
 8005198:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800519a:	69bb      	ldr	r3, [r7, #24]
	}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	461a      	mov	r2, r3
 80051bc:	21a5      	movs	r1, #165	; 0xa5
 80051be:	f001 fe0d 	bl	8006ddc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051cc:	3b01      	subs	r3, #1
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f023 0307 	bic.w	r3, r3, #7
 80051da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	617b      	str	r3, [r7, #20]
}
 80051f8:	bf00      	nop
 80051fa:	e7fe      	b.n	80051fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01f      	beq.n	8005242 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	e012      	b.n	800522e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	7819      	ldrb	r1, [r3, #0]
 8005210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	3334      	adds	r3, #52	; 0x34
 8005218:	460a      	mov	r2, r1
 800521a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d006      	beq.n	8005236 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3301      	adds	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2b0f      	cmp	r3, #15
 8005232:	d9e9      	bls.n	8005208 <prvInitialiseNewTask+0x64>
 8005234:	e000      	b.n	8005238 <prvInitialiseNewTask+0x94>
			{
				break;
 8005236:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005240:	e003      	b.n	800524a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	2b37      	cmp	r3, #55	; 0x37
 800524e:	d901      	bls.n	8005254 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005250:	2337      	movs	r3, #55	; 0x37
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005258:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800525e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	2200      	movs	r2, #0
 8005264:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	3304      	adds	r3, #4
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe fffa 	bl	8004264 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	3318      	adds	r3, #24
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe fff5 	bl	8004264 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	2200      	movs	r2, #0
 8005294:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	68f9      	ldr	r1, [r7, #12]
 80052a2:	69b8      	ldr	r0, [r7, #24]
 80052a4:	f001 f928 	bl	80064f8 <pxPortInitialiseStack>
 80052a8:	4602      	mov	r2, r0
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ba:	bf00      	nop
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052cc:	f001 fa42 	bl	8006754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052d0:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <prvAddNewTaskToReadyList+0xc4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <prvAddNewTaskToReadyList+0xc4>)
 80052d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052da:	4b2c      	ldr	r3, [pc, #176]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052e2:	4a2a      	ldr	r2, [pc, #168]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052e8:	4b27      	ldr	r3, [pc, #156]	; (8005388 <prvAddNewTaskToReadyList+0xc4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d110      	bne.n	8005312 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052f0:	f000 fc16 	bl	8005b20 <prvInitialiseTaskLists>
 80052f4:	e00d      	b.n	8005312 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052f6:	4b26      	ldr	r3, [pc, #152]	; (8005390 <prvAddNewTaskToReadyList+0xcc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052fe:	4b23      	ldr	r3, [pc, #140]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	429a      	cmp	r2, r3
 800530a:	d802      	bhi.n	8005312 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800530c:	4a1f      	ldr	r2, [pc, #124]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005312:	4b20      	ldr	r3, [pc, #128]	; (8005394 <prvAddNewTaskToReadyList+0xd0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3301      	adds	r3, #1
 8005318:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <prvAddNewTaskToReadyList+0xd0>)
 800531a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800531c:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <prvAddNewTaskToReadyList+0xd0>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <prvAddNewTaskToReadyList+0xd4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d903      	bls.n	8005338 <prvAddNewTaskToReadyList+0x74>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <prvAddNewTaskToReadyList+0xd4>)
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4a15      	ldr	r2, [pc, #84]	; (800539c <prvAddNewTaskToReadyList+0xd8>)
 8005346:	441a      	add	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7fe ff95 	bl	800427e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005354:	f001 fa2e 	bl	80067b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <prvAddNewTaskToReadyList+0xcc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00e      	beq.n	800537e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	429a      	cmp	r2, r3
 800536c:	d207      	bcs.n	800537e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <prvAddNewTaskToReadyList+0xdc>)
 8005370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000c28 	.word	0x20000c28
 800538c:	20000754 	.word	0x20000754
 8005390:	20000c34 	.word	0x20000c34
 8005394:	20000c44 	.word	0x20000c44
 8005398:	20000c30 	.word	0x20000c30
 800539c:	20000758 	.word	0x20000758
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d017      	beq.n	80053e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <vTaskDelay+0x60>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <vTaskDelay+0x30>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	60bb      	str	r3, [r7, #8]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053d4:	f000 f880 	bl	80054d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053d8:	2100      	movs	r1, #0
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fcea 	bl	8005db4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053e0:	f000 f888 	bl	80054f4 <xTaskResumeAll>
 80053e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d107      	bne.n	80053fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <vTaskDelay+0x64>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000c50 	.word	0x20000c50
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800541a:	463a      	mov	r2, r7
 800541c:	1d39      	adds	r1, r7, #4
 800541e:	f107 0308 	add.w	r3, r7, #8
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe feca 	bl	80041bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	9202      	str	r2, [sp, #8]
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	2300      	movs	r3, #0
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2300      	movs	r3, #0
 8005438:	460a      	mov	r2, r1
 800543a:	4921      	ldr	r1, [pc, #132]	; (80054c0 <vTaskStartScheduler+0xb4>)
 800543c:	4821      	ldr	r0, [pc, #132]	; (80054c4 <vTaskStartScheduler+0xb8>)
 800543e:	f7ff fe0f 	bl	8005060 <xTaskCreateStatic>
 8005442:	4603      	mov	r3, r0
 8005444:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <vTaskStartScheduler+0xbc>)
 8005446:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005448:	4b1f      	ldr	r3, [pc, #124]	; (80054c8 <vTaskStartScheduler+0xbc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005450:	2301      	movs	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e001      	b.n	800545a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d102      	bne.n	8005466 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005460:	f000 fcfc 	bl	8005e5c <xTimerCreateTimerTask>
 8005464:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d116      	bne.n	800549a <vTaskStartScheduler+0x8e>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	613b      	str	r3, [r7, #16]
}
 800547e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <vTaskStartScheduler+0xc0>)
 8005482:	f04f 32ff 	mov.w	r2, #4294967295
 8005486:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005488:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <vTaskStartScheduler+0xc4>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800548e:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <vTaskStartScheduler+0xc8>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005494:	f001 f8bc 	bl	8006610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005498:	e00e      	b.n	80054b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d10a      	bne.n	80054b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	60fb      	str	r3, [r7, #12]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vTaskStartScheduler+0xaa>
}
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	080076bc 	.word	0x080076bc
 80054c4:	08005af1 	.word	0x08005af1
 80054c8:	20000c4c 	.word	0x20000c4c
 80054cc:	20000c48 	.word	0x20000c48
 80054d0:	20000c34 	.word	0x20000c34
 80054d4:	20000c2c 	.word	0x20000c2c

080054d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <vTaskSuspendAll+0x18>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	4a03      	ldr	r2, [pc, #12]	; (80054f0 <vTaskSuspendAll+0x18>)
 80054e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054e6:	bf00      	nop
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	20000c50 	.word	0x20000c50

080054f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005502:	4b42      	ldr	r3, [pc, #264]	; (800560c <xTaskResumeAll+0x118>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <xTaskResumeAll+0x2c>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	603b      	str	r3, [r7, #0]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005520:	f001 f918 	bl	8006754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005524:	4b39      	ldr	r3, [pc, #228]	; (800560c <xTaskResumeAll+0x118>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3b01      	subs	r3, #1
 800552a:	4a38      	ldr	r2, [pc, #224]	; (800560c <xTaskResumeAll+0x118>)
 800552c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800552e:	4b37      	ldr	r3, [pc, #220]	; (800560c <xTaskResumeAll+0x118>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d162      	bne.n	80055fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005536:	4b36      	ldr	r3, [pc, #216]	; (8005610 <xTaskResumeAll+0x11c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d05e      	beq.n	80055fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800553e:	e02f      	b.n	80055a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005540:	4b34      	ldr	r3, [pc, #208]	; (8005614 <xTaskResumeAll+0x120>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3318      	adds	r3, #24
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fef3 	bl	8004338 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3304      	adds	r3, #4
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe feee 	bl	8004338 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	4b2d      	ldr	r3, [pc, #180]	; (8005618 <xTaskResumeAll+0x124>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d903      	bls.n	8005570 <xTaskResumeAll+0x7c>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	4a2a      	ldr	r2, [pc, #168]	; (8005618 <xTaskResumeAll+0x124>)
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4a27      	ldr	r2, [pc, #156]	; (800561c <xTaskResumeAll+0x128>)
 800557e:	441a      	add	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f7fe fe79 	bl	800427e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005590:	4b23      	ldr	r3, [pc, #140]	; (8005620 <xTaskResumeAll+0x12c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800559a:	4b22      	ldr	r3, [pc, #136]	; (8005624 <xTaskResumeAll+0x130>)
 800559c:	2201      	movs	r2, #1
 800559e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055a0:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <xTaskResumeAll+0x120>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1cb      	bne.n	8005540 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055ae:	f000 fb55 	bl	8005c5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055b2:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <xTaskResumeAll+0x134>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d010      	beq.n	80055e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055be:	f000 f847 	bl	8005650 <xTaskIncrementTick>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055c8:	4b16      	ldr	r3, [pc, #88]	; (8005624 <xTaskResumeAll+0x130>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f1      	bne.n	80055be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055da:	4b13      	ldr	r3, [pc, #76]	; (8005628 <xTaskResumeAll+0x134>)
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <xTaskResumeAll+0x130>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055ec:	4b0f      	ldr	r3, [pc, #60]	; (800562c <xTaskResumeAll+0x138>)
 80055ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055fc:	f001 f8da 	bl	80067b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005600:	68bb      	ldr	r3, [r7, #8]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000c50 	.word	0x20000c50
 8005610:	20000c28 	.word	0x20000c28
 8005614:	20000be8 	.word	0x20000be8
 8005618:	20000c30 	.word	0x20000c30
 800561c:	20000758 	.word	0x20000758
 8005620:	20000754 	.word	0x20000754
 8005624:	20000c3c 	.word	0x20000c3c
 8005628:	20000c38 	.word	0x20000c38
 800562c:	e000ed04 	.word	0xe000ed04

08005630 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <xTaskGetTickCount+0x1c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800563c:	687b      	ldr	r3, [r7, #4]
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000c2c 	.word	0x20000c2c

08005650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565a:	4b4f      	ldr	r3, [pc, #316]	; (8005798 <xTaskIncrementTick+0x148>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 808f 	bne.w	8005782 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005664:	4b4d      	ldr	r3, [pc, #308]	; (800579c <xTaskIncrementTick+0x14c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800566c:	4a4b      	ldr	r2, [pc, #300]	; (800579c <xTaskIncrementTick+0x14c>)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d120      	bne.n	80056ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005678:	4b49      	ldr	r3, [pc, #292]	; (80057a0 <xTaskIncrementTick+0x150>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <xTaskIncrementTick+0x48>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	603b      	str	r3, [r7, #0]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xTaskIncrementTick+0x46>
 8005698:	4b41      	ldr	r3, [pc, #260]	; (80057a0 <xTaskIncrementTick+0x150>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <xTaskIncrementTick+0x154>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a3f      	ldr	r2, [pc, #252]	; (80057a0 <xTaskIncrementTick+0x150>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	4a3f      	ldr	r2, [pc, #252]	; (80057a4 <xTaskIncrementTick+0x154>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b3e      	ldr	r3, [pc, #248]	; (80057a8 <xTaskIncrementTick+0x158>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	4a3d      	ldr	r2, [pc, #244]	; (80057a8 <xTaskIncrementTick+0x158>)
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	f000 fad1 	bl	8005c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056ba:	4b3c      	ldr	r3, [pc, #240]	; (80057ac <xTaskIncrementTick+0x15c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d349      	bcc.n	8005758 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c4:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <xTaskIncrementTick+0x150>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ce:	4b37      	ldr	r3, [pc, #220]	; (80057ac <xTaskIncrementTick+0x15c>)
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	601a      	str	r2, [r3, #0]
					break;
 80056d6:	e03f      	b.n	8005758 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d8:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <xTaskIncrementTick+0x150>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d203      	bcs.n	80056f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056f0:	4a2e      	ldr	r2, [pc, #184]	; (80057ac <xTaskIncrementTick+0x15c>)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056f6:	e02f      	b.n	8005758 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe fe1b 	bl	8004338 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	3318      	adds	r3, #24
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fe12 	bl	8004338 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <xTaskIncrementTick+0x160>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d903      	bls.n	8005728 <xTaskIncrementTick+0xd8>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	4a22      	ldr	r2, [pc, #136]	; (80057b0 <xTaskIncrementTick+0x160>)
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <xTaskIncrementTick+0x164>)
 8005736:	441a      	add	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f7fe fd9d 	bl	800427e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <xTaskIncrementTick+0x168>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	429a      	cmp	r2, r3
 8005750:	d3b8      	bcc.n	80056c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005752:	2301      	movs	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005756:	e7b5      	b.n	80056c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005758:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <xTaskIncrementTick+0x168>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575e:	4915      	ldr	r1, [pc, #84]	; (80057b4 <xTaskIncrementTick+0x164>)
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d901      	bls.n	8005774 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005774:	4b11      	ldr	r3, [pc, #68]	; (80057bc <xTaskIncrementTick+0x16c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e004      	b.n	800578c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005782:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <xTaskIncrementTick+0x170>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3301      	adds	r3, #1
 8005788:	4a0d      	ldr	r2, [pc, #52]	; (80057c0 <xTaskIncrementTick+0x170>)
 800578a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800578c:	697b      	ldr	r3, [r7, #20]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000c50 	.word	0x20000c50
 800579c:	20000c2c 	.word	0x20000c2c
 80057a0:	20000be0 	.word	0x20000be0
 80057a4:	20000be4 	.word	0x20000be4
 80057a8:	20000c40 	.word	0x20000c40
 80057ac:	20000c48 	.word	0x20000c48
 80057b0:	20000c30 	.word	0x20000c30
 80057b4:	20000758 	.word	0x20000758
 80057b8:	20000754 	.word	0x20000754
 80057bc:	20000c3c 	.word	0x20000c3c
 80057c0:	20000c38 	.word	0x20000c38

080057c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ca:	4b28      	ldr	r3, [pc, #160]	; (800586c <vTaskSwitchContext+0xa8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057d2:	4b27      	ldr	r3, [pc, #156]	; (8005870 <vTaskSwitchContext+0xac>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057d8:	e041      	b.n	800585e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80057da:	4b25      	ldr	r3, [pc, #148]	; (8005870 <vTaskSwitchContext+0xac>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e0:	4b24      	ldr	r3, [pc, #144]	; (8005874 <vTaskSwitchContext+0xb0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e010      	b.n	800580a <vTaskSwitchContext+0x46>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <vTaskSwitchContext+0x40>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
}
 8005800:	bf00      	nop
 8005802:	e7fe      	b.n	8005802 <vTaskSwitchContext+0x3e>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3b01      	subs	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	491b      	ldr	r1, [pc, #108]	; (8005878 <vTaskSwitchContext+0xb4>)
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0e4      	beq.n	80057e8 <vTaskSwitchContext+0x24>
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4a13      	ldr	r2, [pc, #76]	; (8005878 <vTaskSwitchContext+0xb4>)
 800582a:	4413      	add	r3, r2
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	605a      	str	r2, [r3, #4]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	3308      	adds	r3, #8
 8005840:	429a      	cmp	r2, r3
 8005842:	d104      	bne.n	800584e <vTaskSwitchContext+0x8a>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4a09      	ldr	r2, [pc, #36]	; (800587c <vTaskSwitchContext+0xb8>)
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	4a06      	ldr	r2, [pc, #24]	; (8005874 <vTaskSwitchContext+0xb0>)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6013      	str	r3, [r2, #0]
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	20000c50 	.word	0x20000c50
 8005870:	20000c3c 	.word	0x20000c3c
 8005874:	20000c30 	.word	0x20000c30
 8005878:	20000758 	.word	0x20000758
 800587c:	20000754 	.word	0x20000754

08005880 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <vTaskPlaceOnEventList+0x44>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3318      	adds	r3, #24
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fe fd09 	bl	80042c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058b4:	2101      	movs	r1, #1
 80058b6:	6838      	ldr	r0, [r7, #0]
 80058b8:	f000 fa7c 	bl	8005db4 <prvAddCurrentTaskToDelayedList>
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20000754 	.word	0x20000754

080058c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	617b      	str	r3, [r7, #20]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <vTaskPlaceOnEventListRestricted+0x54>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3318      	adds	r3, #24
 80058f6:	4619      	mov	r1, r3
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7fe fcc0 	bl	800427e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005904:	f04f 33ff 	mov.w	r3, #4294967295
 8005908:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	68b8      	ldr	r0, [r7, #8]
 800590e:	f000 fa51 	bl	8005db4 <prvAddCurrentTaskToDelayedList>
	}
 8005912:	bf00      	nop
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000754 	.word	0x20000754

08005920 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60fb      	str	r3, [r7, #12]
}
 8005948:	bf00      	nop
 800594a:	e7fe      	b.n	800594a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	3318      	adds	r3, #24
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe fcf1 	bl	8004338 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005956:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <xTaskRemoveFromEventList+0xb0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11d      	bne.n	800599a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3304      	adds	r3, #4
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fce8 	bl	8004338 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <xTaskRemoveFromEventList+0xb4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <xTaskRemoveFromEventList+0x5c>
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <xTaskRemoveFromEventList+0xb4>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <xTaskRemoveFromEventList+0xb8>)
 800598a:	441a      	add	r2, r3
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f7fe fc73 	bl	800427e <vListInsertEnd>
 8005998:	e005      	b.n	80059a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3318      	adds	r3, #24
 800599e:	4619      	mov	r1, r3
 80059a0:	480e      	ldr	r0, [pc, #56]	; (80059dc <xTaskRemoveFromEventList+0xbc>)
 80059a2:	f7fe fc6c 	bl	800427e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <xTaskRemoveFromEventList+0xc0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d905      	bls.n	80059c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <xTaskRemoveFromEventList+0xc4>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e001      	b.n	80059c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059c4:	697b      	ldr	r3, [r7, #20]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000c50 	.word	0x20000c50
 80059d4:	20000c30 	.word	0x20000c30
 80059d8:	20000758 	.word	0x20000758
 80059dc:	20000be8 	.word	0x20000be8
 80059e0:	20000754 	.word	0x20000754
 80059e4:	20000c3c 	.word	0x20000c3c

080059e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <vTaskInternalSetTimeOutState+0x24>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <vTaskInternalSetTimeOutState+0x28>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	605a      	str	r2, [r3, #4]
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	20000c40 	.word	0x20000c40
 8005a10:	20000c2c 	.word	0x20000c2c

08005a14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	613b      	str	r3, [r7, #16]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	60fb      	str	r3, [r7, #12]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a56:	f000 fe7d 	bl	8006754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <xTaskCheckForTimeOut+0xbc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d102      	bne.n	8005a7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	e023      	b.n	8005ac2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <xTaskCheckForTimeOut+0xc0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d007      	beq.n	8005a96 <xTaskCheckForTimeOut+0x82>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e015      	b.n	8005ac2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d20b      	bcs.n	8005ab8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	1ad2      	subs	r2, r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ff9b 	bl	80059e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	e004      	b.n	8005ac2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ac2:	f000 fe77 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000c2c 	.word	0x20000c2c
 8005ad4:	20000c40 	.word	0x20000c40

08005ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005adc:	4b03      	ldr	r3, [pc, #12]	; (8005aec <vTaskMissedYield+0x14>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000c3c 	.word	0x20000c3c

08005af0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005af8:	f000 f852 	bl	8005ba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <prvIdleTask+0x28>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d9f9      	bls.n	8005af8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <prvIdleTask+0x2c>)
 8005b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b14:	e7f0      	b.n	8005af8 <prvIdleTask+0x8>
 8005b16:	bf00      	nop
 8005b18:	20000758 	.word	0x20000758
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b26:	2300      	movs	r3, #0
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	e00c      	b.n	8005b46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a12      	ldr	r2, [pc, #72]	; (8005b80 <prvInitialiseTaskLists+0x60>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fb72 	bl	8004224 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3301      	adds	r3, #1
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b37      	cmp	r3, #55	; 0x37
 8005b4a:	d9ef      	bls.n	8005b2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b4c:	480d      	ldr	r0, [pc, #52]	; (8005b84 <prvInitialiseTaskLists+0x64>)
 8005b4e:	f7fe fb69 	bl	8004224 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b52:	480d      	ldr	r0, [pc, #52]	; (8005b88 <prvInitialiseTaskLists+0x68>)
 8005b54:	f7fe fb66 	bl	8004224 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b58:	480c      	ldr	r0, [pc, #48]	; (8005b8c <prvInitialiseTaskLists+0x6c>)
 8005b5a:	f7fe fb63 	bl	8004224 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b5e:	480c      	ldr	r0, [pc, #48]	; (8005b90 <prvInitialiseTaskLists+0x70>)
 8005b60:	f7fe fb60 	bl	8004224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b64:	480b      	ldr	r0, [pc, #44]	; (8005b94 <prvInitialiseTaskLists+0x74>)
 8005b66:	f7fe fb5d 	bl	8004224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <prvInitialiseTaskLists+0x78>)
 8005b6c:	4a05      	ldr	r2, [pc, #20]	; (8005b84 <prvInitialiseTaskLists+0x64>)
 8005b6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <prvInitialiseTaskLists+0x7c>)
 8005b72:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <prvInitialiseTaskLists+0x68>)
 8005b74:	601a      	str	r2, [r3, #0]
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000758 	.word	0x20000758
 8005b84:	20000bb8 	.word	0x20000bb8
 8005b88:	20000bcc 	.word	0x20000bcc
 8005b8c:	20000be8 	.word	0x20000be8
 8005b90:	20000bfc 	.word	0x20000bfc
 8005b94:	20000c14 	.word	0x20000c14
 8005b98:	20000be0 	.word	0x20000be0
 8005b9c:	20000be4 	.word	0x20000be4

08005ba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba6:	e019      	b.n	8005bdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ba8:	f000 fdd4 	bl	8006754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <prvCheckTasksWaitingTermination+0x50>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fbbd 	bl	8004338 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <prvCheckTasksWaitingTermination+0x54>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	4a0b      	ldr	r2, [pc, #44]	; (8005bf4 <prvCheckTasksWaitingTermination+0x54>)
 8005bc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <prvCheckTasksWaitingTermination+0x58>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <prvCheckTasksWaitingTermination+0x58>)
 8005bd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bd2:	f000 fdef 	bl	80067b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f810 	bl	8005bfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <prvCheckTasksWaitingTermination+0x58>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e1      	bne.n	8005ba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000bfc 	.word	0x20000bfc
 8005bf4:	20000c28 	.word	0x20000c28
 8005bf8:	20000c10 	.word	0x20000c10

08005bfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d108      	bne.n	8005c20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 ff8c 	bl	8006b30 <vPortFree>
				vPortFree( pxTCB );
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 ff89 	bl	8006b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c1e:	e018      	b.n	8005c52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d103      	bne.n	8005c32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 ff80 	bl	8006b30 <vPortFree>
	}
 8005c30:	e00f      	b.n	8005c52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d00a      	beq.n	8005c52 <prvDeleteTCB+0x56>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60fb      	str	r3, [r7, #12]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <prvDeleteTCB+0x54>
	}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c62:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <prvResetNextTaskUnblockTime+0x38>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d104      	bne.n	8005c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <prvResetNextTaskUnblockTime+0x3c>)
 8005c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c74:	e008      	b.n	8005c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c76:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <prvResetNextTaskUnblockTime+0x38>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a04      	ldr	r2, [pc, #16]	; (8005c98 <prvResetNextTaskUnblockTime+0x3c>)
 8005c86:	6013      	str	r3, [r2, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	20000be0 	.word	0x20000be0
 8005c98:	20000c48 	.word	0x20000c48

08005c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ca2:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <xTaskGetSchedulerState+0x34>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005caa:	2301      	movs	r3, #1
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	e008      	b.n	8005cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <xTaskGetSchedulerState+0x38>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	607b      	str	r3, [r7, #4]
 8005cbc:	e001      	b.n	8005cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cc2:	687b      	ldr	r3, [r7, #4]
	}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	20000c34 	.word	0x20000c34
 8005cd4:	20000c50 	.word	0x20000c50

08005cd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d056      	beq.n	8005d9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cee:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <xTaskPriorityDisinherit+0xd0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d00a      	beq.n	8005d0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	60fb      	str	r3, [r7, #12]
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	60bb      	str	r3, [r7, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d30:	1e5a      	subs	r2, r3, #1
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d02c      	beq.n	8005d9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d128      	bne.n	8005d9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe faf2 	bl	8004338 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <xTaskPriorityDisinherit+0xd4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d903      	bls.n	8005d7c <xTaskPriorityDisinherit+0xa4>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <xTaskPriorityDisinherit+0xd4>)
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <xTaskPriorityDisinherit+0xd8>)
 8005d8a:	441a      	add	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f7fe fa73 	bl	800427e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d9c:	697b      	ldr	r3, [r7, #20]
	}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000754 	.word	0x20000754
 8005dac:	20000c30 	.word	0x20000c30
 8005db0:	20000758 	.word	0x20000758

08005db4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <prvAddCurrentTaskToDelayedList+0x90>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc4:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fab4 	bl	8004338 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d10a      	bne.n	8005dee <prvAddCurrentTaskToDelayedList+0x3a>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dde:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4819      	ldr	r0, [pc, #100]	; (8005e4c <prvAddCurrentTaskToDelayedList+0x98>)
 8005de8:	f7fe fa49 	bl	800427e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dec:	e026      	b.n	8005e3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d209      	bcs.n	8005e1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e06:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f7fe fa57 	bl	80042c6 <vListInsert>
}
 8005e18:	e010      	b.n	8005e3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f7fe fa4d 	bl	80042c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d202      	bcs.n	8005e3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e36:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6013      	str	r3, [r2, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000c2c 	.word	0x20000c2c
 8005e48:	20000754 	.word	0x20000754
 8005e4c:	20000c14 	.word	0x20000c14
 8005e50:	20000be4 	.word	0x20000be4
 8005e54:	20000be0 	.word	0x20000be0
 8005e58:	20000c48 	.word	0x20000c48

08005e5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e66:	f000 fb07 	bl	8006478 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <xTimerCreateTimerTask+0x80>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d021      	beq.n	8005eb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e7a:	1d3a      	adds	r2, r7, #4
 8005e7c:	f107 0108 	add.w	r1, r7, #8
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe f9b3 	bl	80041f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	9202      	str	r2, [sp, #8]
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	2302      	movs	r3, #2
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	4910      	ldr	r1, [pc, #64]	; (8005ee0 <xTimerCreateTimerTask+0x84>)
 8005e9e:	4811      	ldr	r0, [pc, #68]	; (8005ee4 <xTimerCreateTimerTask+0x88>)
 8005ea0:	f7ff f8de 	bl	8005060 <xTaskCreateStatic>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <xTimerCreateTimerTask+0x8c>)
 8005ea8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <xTimerCreateTimerTask+0x8c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	613b      	str	r3, [r7, #16]
}
 8005ece:	bf00      	nop
 8005ed0:	e7fe      	b.n	8005ed0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ed2:	697b      	ldr	r3, [r7, #20]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20000c84 	.word	0x20000c84
 8005ee0:	080076c4 	.word	0x080076c4
 8005ee4:	08006021 	.word	0x08006021
 8005ee8:	20000c88 	.word	0x20000c88

08005eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	623b      	str	r3, [r7, #32]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f1a:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <xTimerGenericCommand+0x98>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d02a      	beq.n	8005f78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b05      	cmp	r3, #5
 8005f32:	dc18      	bgt.n	8005f66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f34:	f7ff feb2 	bl	8005c9c <xTaskGetSchedulerState>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d109      	bne.n	8005f52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <xTimerGenericCommand+0x98>)
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	f107 0110 	add.w	r1, r7, #16
 8005f46:	2300      	movs	r3, #0
 8005f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4a:	f7fe fbc7 	bl	80046dc <xQueueGenericSend>
 8005f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f50:	e012      	b.n	8005f78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f52:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <xTimerGenericCommand+0x98>)
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	f107 0110 	add.w	r1, r7, #16
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f7fe fbbd 	bl	80046dc <xQueueGenericSend>
 8005f62:	6278      	str	r0, [r7, #36]	; 0x24
 8005f64:	e008      	b.n	8005f78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <xTimerGenericCommand+0x98>)
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	f107 0110 	add.w	r1, r7, #16
 8005f6e:	2300      	movs	r3, #0
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	f7fe fcb1 	bl	80048d8 <xQueueGenericSendFromISR>
 8005f76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3728      	adds	r7, #40	; 0x28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000c84 	.word	0x20000c84

08005f88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f92:	4b22      	ldr	r3, [pc, #136]	; (800601c <prvProcessExpiredTimer+0x94>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe f9c9 	bl	8004338 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d022      	beq.n	8005ffa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	18d1      	adds	r1, r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	6978      	ldr	r0, [r7, #20]
 8005fc2:	f000 f8d1 	bl	8006168 <prvInsertTimerInActiveList>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01f      	beq.n	800600c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	6978      	ldr	r0, [r7, #20]
 8005fd8:	f7ff ff88 	bl	8005eec <xTimerGenericCommand>
 8005fdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d113      	bne.n	800600c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60fb      	str	r3, [r7, #12]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	b2da      	uxtb	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	6978      	ldr	r0, [r7, #20]
 8006012:	4798      	blx	r3
}
 8006014:	bf00      	nop
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000c7c 	.word	0x20000c7c

08006020 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	4618      	mov	r0, r3
 800602e:	f000 f857 	bl	80060e0 <prvGetNextExpireTime>
 8006032:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4619      	mov	r1, r3
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f803 	bl	8006044 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800603e:	f000 f8d5 	bl	80061ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006042:	e7f1      	b.n	8006028 <prvTimerTask+0x8>

08006044 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800604e:	f7ff fa43 	bl	80054d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006052:	f107 0308 	add.w	r3, r7, #8
 8006056:	4618      	mov	r0, r3
 8006058:	f000 f866 	bl	8006128 <prvSampleTimeNow>
 800605c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d130      	bne.n	80060c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <prvProcessTimerOrBlockTask+0x3c>
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	429a      	cmp	r2, r3
 8006070:	d806      	bhi.n	8006080 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006072:	f7ff fa3f 	bl	80054f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff ff85 	bl	8005f88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800607e:	e024      	b.n	80060ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006086:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <prvProcessTimerOrBlockTask+0x90>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <prvProcessTimerOrBlockTask+0x50>
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <prvProcessTimerOrBlockTask+0x52>
 8006094:	2300      	movs	r3, #0
 8006096:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <prvProcessTimerOrBlockTask+0x94>)
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	f7fe ffa7 	bl	8004ff8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060aa:	f7ff fa23 	bl	80054f4 <xTaskResumeAll>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <prvProcessTimerOrBlockTask+0x98>)
 80060b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	f3bf 8f6f 	isb	sy
}
 80060c4:	e001      	b.n	80060ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060c6:	f7ff fa15 	bl	80054f4 <xTaskResumeAll>
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000c80 	.word	0x20000c80
 80060d8:	20000c84 	.word	0x20000c84
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060e8:	4b0e      	ldr	r3, [pc, #56]	; (8006124 <prvGetNextExpireTime+0x44>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <prvGetNextExpireTime+0x16>
 80060f2:	2201      	movs	r2, #1
 80060f4:	e000      	b.n	80060f8 <prvGetNextExpireTime+0x18>
 80060f6:	2200      	movs	r2, #0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006104:	4b07      	ldr	r3, [pc, #28]	; (8006124 <prvGetNextExpireTime+0x44>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e001      	b.n	8006114 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006114:	68fb      	ldr	r3, [r7, #12]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000c7c 	.word	0x20000c7c

08006128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006130:	f7ff fa7e 	bl	8005630 <xTaskGetTickCount>
 8006134:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <prvSampleTimeNow+0x3c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	429a      	cmp	r2, r3
 800613e:	d205      	bcs.n	800614c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006140:	f000 f936 	bl	80063b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e002      	b.n	8006152 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006152:	4a04      	ldr	r2, [pc, #16]	; (8006164 <prvSampleTimeNow+0x3c>)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006158:	68fb      	ldr	r3, [r7, #12]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000c8c 	.word	0x20000c8c

08006168 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	429a      	cmp	r2, r3
 800618c:	d812      	bhi.n	80061b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	1ad2      	subs	r2, r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	429a      	cmp	r2, r3
 800619a:	d302      	bcc.n	80061a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e01b      	b.n	80061da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061a2:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <prvInsertTimerInActiveList+0x7c>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7fe f88a 	bl	80042c6 <vListInsert>
 80061b2:	e012      	b.n	80061da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d206      	bcs.n	80061ca <prvInsertTimerInActiveList+0x62>
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d302      	bcc.n	80061ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e007      	b.n	80061da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <prvInsertTimerInActiveList+0x80>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7fe f876 	bl	80042c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061da:	697b      	ldr	r3, [r7, #20]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20000c80 	.word	0x20000c80
 80061e8:	20000c7c 	.word	0x20000c7c

080061ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08e      	sub	sp, #56	; 0x38
 80061f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061f2:	e0ca      	b.n	800638a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da18      	bge.n	800622c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061fa:	1d3b      	adds	r3, r7, #4
 80061fc:	3304      	adds	r3, #4
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	61fb      	str	r3, [r7, #28]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006222:	6850      	ldr	r0, [r2, #4]
 8006224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006226:	6892      	ldr	r2, [r2, #8]
 8006228:	4611      	mov	r1, r2
 800622a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f2c0 80aa 	blt.w	8006388 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	3304      	adds	r3, #4
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe f877 	bl	8004338 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800624a:	463b      	mov	r3, r7
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff ff6b 	bl	8006128 <prvSampleTimeNow>
 8006252:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b09      	cmp	r3, #9
 8006258:	f200 8097 	bhi.w	800638a <prvProcessReceivedCommands+0x19e>
 800625c:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <prvProcessReceivedCommands+0x78>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	0800628d 	.word	0x0800628d
 8006268:	0800628d 	.word	0x0800628d
 800626c:	0800628d 	.word	0x0800628d
 8006270:	08006301 	.word	0x08006301
 8006274:	08006315 	.word	0x08006315
 8006278:	0800635f 	.word	0x0800635f
 800627c:	0800628d 	.word	0x0800628d
 8006280:	0800628d 	.word	0x0800628d
 8006284:	08006301 	.word	0x08006301
 8006288:	08006315 	.word	0x08006315
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	b2da      	uxtb	r2, r3
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	18d1      	adds	r1, r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ac:	f7ff ff5c 	bl	8006168 <prvInsertTimerInActiveList>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d069      	beq.n	800638a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d05e      	beq.n	800638a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	441a      	add	r2, r3
 80062d4:	2300      	movs	r3, #0
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	2100      	movs	r1, #0
 80062dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062de:	f7ff fe05 	bl	8005eec <xTimerGenericCommand>
 80062e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d14f      	bne.n	800638a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	61bb      	str	r3, [r7, #24]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006312:	e03a      	b.n	800638a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	b2da      	uxtb	r2, r3
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	617b      	str	r3, [r7, #20]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	18d1      	adds	r1, r2, r3
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006358:	f7ff ff06 	bl	8006168 <prvInsertTimerInActiveList>
					break;
 800635c:	e015      	b.n	800638a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800636c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636e:	f000 fbdf 	bl	8006b30 <vPortFree>
 8006372:	e00a      	b.n	800638a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800637a:	f023 0301 	bic.w	r3, r3, #1
 800637e:	b2da      	uxtb	r2, r3
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006386:	e000      	b.n	800638a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006388:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800638a:	4b08      	ldr	r3, [pc, #32]	; (80063ac <prvProcessReceivedCommands+0x1c0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	1d39      	adds	r1, r7, #4
 8006390:	2200      	movs	r2, #0
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fbc8 	bl	8004b28 <xQueueReceive>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	f47f af2a 	bne.w	80061f4 <prvProcessReceivedCommands+0x8>
	}
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	3730      	adds	r7, #48	; 0x30
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000c84 	.word	0x20000c84

080063b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063b6:	e048      	b.n	800644a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063b8:	4b2d      	ldr	r3, [pc, #180]	; (8006470 <prvSwitchTimerLists+0xc0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c2:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <prvSwitchTimerLists+0xc0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fd ffb1 	bl	8004338 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d02e      	beq.n	800644a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90e      	bls.n	800641c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800640a:	4b19      	ldr	r3, [pc, #100]	; (8006470 <prvSwitchTimerLists+0xc0>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3304      	adds	r3, #4
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f7fd ff56 	bl	80042c6 <vListInsert>
 800641a:	e016      	b.n	800644a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800641c:	2300      	movs	r3, #0
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	2100      	movs	r1, #0
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff fd60 	bl	8005eec <xTimerGenericCommand>
 800642c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	603b      	str	r3, [r7, #0]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <prvSwitchTimerLists+0xc0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1b1      	bne.n	80063b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <prvSwitchTimerLists+0xc0>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <prvSwitchTimerLists+0xc4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a04      	ldr	r2, [pc, #16]	; (8006470 <prvSwitchTimerLists+0xc0>)
 8006460:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006462:	4a04      	ldr	r2, [pc, #16]	; (8006474 <prvSwitchTimerLists+0xc4>)
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	6013      	str	r3, [r2, #0]
}
 8006468:	bf00      	nop
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000c7c 	.word	0x20000c7c
 8006474:	20000c80 	.word	0x20000c80

08006478 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800647e:	f000 f969 	bl	8006754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006482:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <prvCheckForValidListAndQueue+0x60>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d120      	bne.n	80064cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800648a:	4814      	ldr	r0, [pc, #80]	; (80064dc <prvCheckForValidListAndQueue+0x64>)
 800648c:	f7fd feca 	bl	8004224 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006490:	4813      	ldr	r0, [pc, #76]	; (80064e0 <prvCheckForValidListAndQueue+0x68>)
 8006492:	f7fd fec7 	bl	8004224 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006496:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <prvCheckForValidListAndQueue+0x6c>)
 8006498:	4a10      	ldr	r2, [pc, #64]	; (80064dc <prvCheckForValidListAndQueue+0x64>)
 800649a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800649c:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <prvCheckForValidListAndQueue+0x70>)
 800649e:	4a10      	ldr	r2, [pc, #64]	; (80064e0 <prvCheckForValidListAndQueue+0x68>)
 80064a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064a2:	2300      	movs	r3, #0
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <prvCheckForValidListAndQueue+0x74>)
 80064a8:	4a11      	ldr	r2, [pc, #68]	; (80064f0 <prvCheckForValidListAndQueue+0x78>)
 80064aa:	2110      	movs	r1, #16
 80064ac:	200a      	movs	r0, #10
 80064ae:	f7fd ffd5 	bl	800445c <xQueueGenericCreateStatic>
 80064b2:	4603      	mov	r3, r0
 80064b4:	4a08      	ldr	r2, [pc, #32]	; (80064d8 <prvCheckForValidListAndQueue+0x60>)
 80064b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064b8:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <prvCheckForValidListAndQueue+0x60>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <prvCheckForValidListAndQueue+0x60>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	490b      	ldr	r1, [pc, #44]	; (80064f4 <prvCheckForValidListAndQueue+0x7c>)
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fd42 	bl	8004f50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064cc:	f000 f972 	bl	80067b4 <vPortExitCritical>
}
 80064d0:	bf00      	nop
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000c84 	.word	0x20000c84
 80064dc:	20000c54 	.word	0x20000c54
 80064e0:	20000c68 	.word	0x20000c68
 80064e4:	20000c7c 	.word	0x20000c7c
 80064e8:	20000c80 	.word	0x20000c80
 80064ec:	20000d30 	.word	0x20000d30
 80064f0:	20000c90 	.word	0x20000c90
 80064f4:	080076cc 	.word	0x080076cc

080064f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3b04      	subs	r3, #4
 8006508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3b04      	subs	r3, #4
 8006516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f023 0201 	bic.w	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3b04      	subs	r3, #4
 8006526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006528:	4a0c      	ldr	r2, [pc, #48]	; (800655c <pxPortInitialiseStack+0x64>)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3b14      	subs	r3, #20
 8006532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3b04      	subs	r3, #4
 800653e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f06f 0202 	mvn.w	r2, #2
 8006546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3b20      	subs	r3, #32
 800654c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800654e:	68fb      	ldr	r3, [r7, #12]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	08006561 	.word	0x08006561

08006560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <prvTaskExitError+0x54>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d00a      	beq.n	800658a <prvTaskExitError+0x2a>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <prvTaskExitError+0x28>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	60bb      	str	r3, [r7, #8]
}
 800659c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800659e:	bf00      	nop
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0fc      	beq.n	80065a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065a6:	bf00      	nop
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	2000000c 	.word	0x2000000c
	...

080065c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <pxCurrentTCBConst2>)
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	6808      	ldr	r0, [r1, #0]
 80065c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	f380 8809 	msr	PSP, r0
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8811 	msr	BASEPRI, r0
 80065da:	4770      	bx	lr
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst2>:
 80065e0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065e8:	4808      	ldr	r0, [pc, #32]	; (800660c <prvPortStartFirstTask+0x24>)
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	6800      	ldr	r0, [r0, #0]
 80065ee:	f380 8808 	msr	MSP, r0
 80065f2:	f04f 0000 	mov.w	r0, #0
 80065f6:	f380 8814 	msr	CONTROL, r0
 80065fa:	b662      	cpsie	i
 80065fc:	b661      	cpsie	f
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	df00      	svc	0
 8006608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800660a:	bf00      	nop
 800660c:	e000ed08 	.word	0xe000ed08

08006610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006616:	4b46      	ldr	r3, [pc, #280]	; (8006730 <xPortStartScheduler+0x120>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a46      	ldr	r2, [pc, #280]	; (8006734 <xPortStartScheduler+0x124>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10a      	bne.n	8006636 <xPortStartScheduler+0x26>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	613b      	str	r3, [r7, #16]
}
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006636:	4b3e      	ldr	r3, [pc, #248]	; (8006730 <xPortStartScheduler+0x120>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a3f      	ldr	r2, [pc, #252]	; (8006738 <xPortStartScheduler+0x128>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d10a      	bne.n	8006656 <xPortStartScheduler+0x46>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60fb      	str	r3, [r7, #12]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006656:	4b39      	ldr	r3, [pc, #228]	; (800673c <xPortStartScheduler+0x12c>)
 8006658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	22ff      	movs	r2, #255	; 0xff
 8006666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006678:	b2da      	uxtb	r2, r3
 800667a:	4b31      	ldr	r3, [pc, #196]	; (8006740 <xPortStartScheduler+0x130>)
 800667c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800667e:	4b31      	ldr	r3, [pc, #196]	; (8006744 <xPortStartScheduler+0x134>)
 8006680:	2207      	movs	r2, #7
 8006682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006684:	e009      	b.n	800669a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006686:	4b2f      	ldr	r3, [pc, #188]	; (8006744 <xPortStartScheduler+0x134>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3b01      	subs	r3, #1
 800668c:	4a2d      	ldr	r2, [pc, #180]	; (8006744 <xPortStartScheduler+0x134>)
 800668e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d0ef      	beq.n	8006686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066a6:	4b27      	ldr	r3, [pc, #156]	; (8006744 <xPortStartScheduler+0x134>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f1c3 0307 	rsb	r3, r3, #7
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d00a      	beq.n	80066c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60bb      	str	r3, [r7, #8]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066c8:	4b1e      	ldr	r3, [pc, #120]	; (8006744 <xPortStartScheduler+0x134>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <xPortStartScheduler+0x134>)
 80066d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <xPortStartScheduler+0x134>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066da:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <xPortStartScheduler+0x134>)
 80066dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066e6:	4b18      	ldr	r3, [pc, #96]	; (8006748 <xPortStartScheduler+0x138>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a17      	ldr	r2, [pc, #92]	; (8006748 <xPortStartScheduler+0x138>)
 80066ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066f2:	4b15      	ldr	r3, [pc, #84]	; (8006748 <xPortStartScheduler+0x138>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a14      	ldr	r2, [pc, #80]	; (8006748 <xPortStartScheduler+0x138>)
 80066f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066fe:	f000 f8dd 	bl	80068bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006702:	4b12      	ldr	r3, [pc, #72]	; (800674c <xPortStartScheduler+0x13c>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006708:	f000 f8fc 	bl	8006904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800670c:	4b10      	ldr	r3, [pc, #64]	; (8006750 <xPortStartScheduler+0x140>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0f      	ldr	r2, [pc, #60]	; (8006750 <xPortStartScheduler+0x140>)
 8006712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006718:	f7ff ff66 	bl	80065e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800671c:	f7ff f852 	bl	80057c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006720:	f7ff ff1e 	bl	8006560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	e000ed00 	.word	0xe000ed00
 8006734:	410fc271 	.word	0x410fc271
 8006738:	410fc270 	.word	0x410fc270
 800673c:	e000e400 	.word	0xe000e400
 8006740:	20000d80 	.word	0x20000d80
 8006744:	20000d84 	.word	0x20000d84
 8006748:	e000ed20 	.word	0xe000ed20
 800674c:	2000000c 	.word	0x2000000c
 8006750:	e000ef34 	.word	0xe000ef34

08006754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	607b      	str	r3, [r7, #4]
}
 800676c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800676e:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <vPortEnterCritical+0x58>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	4a0d      	ldr	r2, [pc, #52]	; (80067ac <vPortEnterCritical+0x58>)
 8006776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <vPortEnterCritical+0x58>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d10f      	bne.n	80067a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <vPortEnterCritical+0x5c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	603b      	str	r3, [r7, #0]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <vPortEnterCritical+0x4a>
	}
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	2000000c 	.word	0x2000000c
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <vPortExitCritical+0x50>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <vPortExitCritical+0x24>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	607b      	str	r3, [r7, #4]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <vPortExitCritical+0x50>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3b01      	subs	r3, #1
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <vPortExitCritical+0x50>)
 80067e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067e2:	4b08      	ldr	r3, [pc, #32]	; (8006804 <vPortExitCritical+0x50>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d105      	bne.n	80067f6 <vPortExitCritical+0x42>
 80067ea:	2300      	movs	r3, #0
 80067ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f383 8811 	msr	BASEPRI, r3
}
 80067f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	2000000c 	.word	0x2000000c
	...

08006810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006810:	f3ef 8009 	mrs	r0, PSP
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	4b15      	ldr	r3, [pc, #84]	; (8006870 <pxCurrentTCBConst>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f01e 0f10 	tst.w	lr, #16
 8006820:	bf08      	it	eq
 8006822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	6010      	str	r0, [r2, #0]
 800682c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006834:	f380 8811 	msr	BASEPRI, r0
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f7fe ffc0 	bl	80057c4 <vTaskSwitchContext>
 8006844:	f04f 0000 	mov.w	r0, #0
 8006848:	f380 8811 	msr	BASEPRI, r0
 800684c:	bc09      	pop	{r0, r3}
 800684e:	6819      	ldr	r1, [r3, #0]
 8006850:	6808      	ldr	r0, [r1, #0]
 8006852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006856:	f01e 0f10 	tst.w	lr, #16
 800685a:	bf08      	it	eq
 800685c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006860:	f380 8809 	msr	PSP, r0
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	f3af 8000 	nop.w

08006870 <pxCurrentTCBConst>:
 8006870:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop

08006878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	607b      	str	r3, [r7, #4]
}
 8006890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006892:	f7fe fedd 	bl	8005650 <xTaskIncrementTick>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <xPortSysTickHandler+0x40>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f383 8811 	msr	BASEPRI, r3
}
 80068ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <vPortSetupTimerInterrupt+0x34>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068c6:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <vPortSetupTimerInterrupt+0x38>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <vPortSetupTimerInterrupt+0x3c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0a      	ldr	r2, [pc, #40]	; (80068fc <vPortSetupTimerInterrupt+0x40>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	099b      	lsrs	r3, r3, #6
 80068d8:	4a09      	ldr	r2, [pc, #36]	; (8006900 <vPortSetupTimerInterrupt+0x44>)
 80068da:	3b01      	subs	r3, #1
 80068dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068de:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <vPortSetupTimerInterrupt+0x34>)
 80068e0:	2207      	movs	r2, #7
 80068e2:	601a      	str	r2, [r3, #0]
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	e000e010 	.word	0xe000e010
 80068f4:	e000e018 	.word	0xe000e018
 80068f8:	20000000 	.word	0x20000000
 80068fc:	10624dd3 	.word	0x10624dd3
 8006900:	e000e014 	.word	0xe000e014

08006904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006914 <vPortEnableVFP+0x10>
 8006908:	6801      	ldr	r1, [r0, #0]
 800690a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800690e:	6001      	str	r1, [r0, #0]
 8006910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006912:	bf00      	nop
 8006914:	e000ed88 	.word	0xe000ed88

08006918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800691e:	f3ef 8305 	mrs	r3, IPSR
 8006922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b0f      	cmp	r3, #15
 8006928:	d914      	bls.n	8006954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <vPortValidateInterruptPriority+0x70>)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006934:	4b15      	ldr	r3, [pc, #84]	; (800698c <vPortValidateInterruptPriority+0x74>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	7afa      	ldrb	r2, [r7, #11]
 800693a:	429a      	cmp	r2, r3
 800693c:	d20a      	bcs.n	8006954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <vPortValidateInterruptPriority+0x78>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <vPortValidateInterruptPriority+0x7c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d90a      	bls.n	800697a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	603b      	str	r3, [r7, #0]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <vPortValidateInterruptPriority+0x60>
	}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	e000e3f0 	.word	0xe000e3f0
 800698c:	20000d80 	.word	0x20000d80
 8006990:	e000ed0c 	.word	0xe000ed0c
 8006994:	20000d84 	.word	0x20000d84

08006998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08a      	sub	sp, #40	; 0x28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069a4:	f7fe fd98 	bl	80054d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069a8:	4b5b      	ldr	r3, [pc, #364]	; (8006b18 <pvPortMalloc+0x180>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069b0:	f000 f920 	bl	8006bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069b4:	4b59      	ldr	r3, [pc, #356]	; (8006b1c <pvPortMalloc+0x184>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 8093 	bne.w	8006ae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01d      	beq.n	8006a04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069c8:	2208      	movs	r2, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d014      	beq.n	8006a04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f023 0307 	bic.w	r3, r3, #7
 80069e0:	3308      	adds	r3, #8
 80069e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <pvPortMalloc+0x6c>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	617b      	str	r3, [r7, #20]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06e      	beq.n	8006ae8 <pvPortMalloc+0x150>
 8006a0a:	4b45      	ldr	r3, [pc, #276]	; (8006b20 <pvPortMalloc+0x188>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d869      	bhi.n	8006ae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a14:	4b43      	ldr	r3, [pc, #268]	; (8006b24 <pvPortMalloc+0x18c>)
 8006a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a18:	4b42      	ldr	r3, [pc, #264]	; (8006b24 <pvPortMalloc+0x18c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a1e:	e004      	b.n	8006a2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d903      	bls.n	8006a3c <pvPortMalloc+0xa4>
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f1      	bne.n	8006a20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a3c:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <pvPortMalloc+0x180>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d050      	beq.n	8006ae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2208      	movs	r2, #8
 8006a4c:	4413      	add	r3, r2
 8006a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	2308      	movs	r3, #8
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d91f      	bls.n	8006aa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <pvPortMalloc+0xf8>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	613b      	str	r3, [r7, #16]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aa2:	69b8      	ldr	r0, [r7, #24]
 8006aa4:	f000 f908 	bl	8006cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <pvPortMalloc+0x188>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <pvPortMalloc+0x188>)
 8006ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <pvPortMalloc+0x188>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <pvPortMalloc+0x190>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d203      	bcs.n	8006aca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ac2:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <pvPortMalloc+0x188>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <pvPortMalloc+0x190>)
 8006ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <pvPortMalloc+0x184>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <pvPortMalloc+0x194>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <pvPortMalloc+0x194>)
 8006ae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ae8:	f7fe fd04 	bl	80054f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <pvPortMalloc+0x174>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60fb      	str	r3, [r7, #12]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <pvPortMalloc+0x172>
	return pvReturn;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3728      	adds	r7, #40	; 0x28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20004990 	.word	0x20004990
 8006b1c:	200049a4 	.word	0x200049a4
 8006b20:	20004994 	.word	0x20004994
 8006b24:	20004988 	.word	0x20004988
 8006b28:	20004998 	.word	0x20004998
 8006b2c:	2000499c 	.word	0x2000499c

08006b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d04d      	beq.n	8006bde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b42:	2308      	movs	r3, #8
 8006b44:	425b      	negs	r3, r3
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4413      	add	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <vPortFree+0xb8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <vPortFree+0x44>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	60fb      	str	r3, [r7, #12]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <vPortFree+0x62>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60bb      	str	r3, [r7, #8]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <vPortFree+0xb8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01e      	beq.n	8006bde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d11a      	bne.n	8006bde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <vPortFree+0xb8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bb8:	f7fe fc8e 	bl	80054d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <vPortFree+0xbc>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	4a09      	ldr	r2, [pc, #36]	; (8006bec <vPortFree+0xbc>)
 8006bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bca:	6938      	ldr	r0, [r7, #16]
 8006bcc:	f000 f874 	bl	8006cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <vPortFree+0xc0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4a06      	ldr	r2, [pc, #24]	; (8006bf0 <vPortFree+0xc0>)
 8006bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bda:	f7fe fc8b 	bl	80054f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bde:	bf00      	nop
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	200049a4 	.word	0x200049a4
 8006bec:	20004994 	.word	0x20004994
 8006bf0:	200049a0 	.word	0x200049a0

08006bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c00:	4b27      	ldr	r3, [pc, #156]	; (8006ca0 <prvHeapInit+0xac>)
 8006c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00c      	beq.n	8006c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3307      	adds	r3, #7
 8006c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0307 	bic.w	r3, r3, #7
 8006c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <prvHeapInit+0xac>)
 8006c24:	4413      	add	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ca4 <prvHeapInit+0xb0>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c32:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <prvHeapInit+0xb0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c40:	2208      	movs	r2, #8
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0307 	bic.w	r3, r3, #7
 8006c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c56:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c5e:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c74:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <prvHeapInit+0xb8>)
 8006c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <prvHeapInit+0xbc>)
 8006c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c8c:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <prvHeapInit+0xc0>)
 8006c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20000d88 	.word	0x20000d88
 8006ca4:	20004988 	.word	0x20004988
 8006ca8:	20004990 	.word	0x20004990
 8006cac:	20004998 	.word	0x20004998
 8006cb0:	20004994 	.word	0x20004994
 8006cb4:	200049a4 	.word	0x200049a4

08006cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cc0:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <prvInsertBlockIntoFreeList+0xac>)
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e002      	b.n	8006ccc <prvInsertBlockIntoFreeList+0x14>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d8f7      	bhi.n	8006cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d108      	bne.n	8006cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	441a      	add	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	441a      	add	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d118      	bne.n	8006d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <prvInsertBlockIntoFreeList+0xb0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d00d      	beq.n	8006d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e008      	b.n	8006d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <prvInsertBlockIntoFreeList+0xb0>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e003      	b.n	8006d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d002      	beq.n	8006d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20004988 	.word	0x20004988
 8006d68:	20004990 	.word	0x20004990

08006d6c <__errno>:
 8006d6c:	4b01      	ldr	r3, [pc, #4]	; (8006d74 <__errno+0x8>)
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000010 	.word	0x20000010

08006d78 <__libc_init_array>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	4d0d      	ldr	r5, [pc, #52]	; (8006db0 <__libc_init_array+0x38>)
 8006d7c:	4c0d      	ldr	r4, [pc, #52]	; (8006db4 <__libc_init_array+0x3c>)
 8006d7e:	1b64      	subs	r4, r4, r5
 8006d80:	10a4      	asrs	r4, r4, #2
 8006d82:	2600      	movs	r6, #0
 8006d84:	42a6      	cmp	r6, r4
 8006d86:	d109      	bne.n	8006d9c <__libc_init_array+0x24>
 8006d88:	4d0b      	ldr	r5, [pc, #44]	; (8006db8 <__libc_init_array+0x40>)
 8006d8a:	4c0c      	ldr	r4, [pc, #48]	; (8006dbc <__libc_init_array+0x44>)
 8006d8c:	f000 fc4e 	bl	800762c <_init>
 8006d90:	1b64      	subs	r4, r4, r5
 8006d92:	10a4      	asrs	r4, r4, #2
 8006d94:	2600      	movs	r6, #0
 8006d96:	42a6      	cmp	r6, r4
 8006d98:	d105      	bne.n	8006da6 <__libc_init_array+0x2e>
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da0:	4798      	blx	r3
 8006da2:	3601      	adds	r6, #1
 8006da4:	e7ee      	b.n	8006d84 <__libc_init_array+0xc>
 8006da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006daa:	4798      	blx	r3
 8006dac:	3601      	adds	r6, #1
 8006dae:	e7f2      	b.n	8006d96 <__libc_init_array+0x1e>
 8006db0:	080077e0 	.word	0x080077e0
 8006db4:	080077e0 	.word	0x080077e0
 8006db8:	080077e0 	.word	0x080077e0
 8006dbc:	080077e4 	.word	0x080077e4

08006dc0 <memcpy>:
 8006dc0:	440a      	add	r2, r1
 8006dc2:	4291      	cmp	r1, r2
 8006dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc8:	d100      	bne.n	8006dcc <memcpy+0xc>
 8006dca:	4770      	bx	lr
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd6:	4291      	cmp	r1, r2
 8006dd8:	d1f9      	bne.n	8006dce <memcpy+0xe>
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <memset>:
 8006ddc:	4402      	add	r2, r0
 8006dde:	4603      	mov	r3, r0
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d100      	bne.n	8006de6 <memset+0xa>
 8006de4:	4770      	bx	lr
 8006de6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dea:	e7f9      	b.n	8006de0 <memset+0x4>

08006dec <siprintf>:
 8006dec:	b40e      	push	{r1, r2, r3}
 8006dee:	b500      	push	{lr}
 8006df0:	b09c      	sub	sp, #112	; 0x70
 8006df2:	ab1d      	add	r3, sp, #116	; 0x74
 8006df4:	9002      	str	r0, [sp, #8]
 8006df6:	9006      	str	r0, [sp, #24]
 8006df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dfc:	4809      	ldr	r0, [pc, #36]	; (8006e24 <siprintf+0x38>)
 8006dfe:	9107      	str	r1, [sp, #28]
 8006e00:	9104      	str	r1, [sp, #16]
 8006e02:	4909      	ldr	r1, [pc, #36]	; (8006e28 <siprintf+0x3c>)
 8006e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e08:	9105      	str	r1, [sp, #20]
 8006e0a:	6800      	ldr	r0, [r0, #0]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	a902      	add	r1, sp, #8
 8006e10:	f000 f868 	bl	8006ee4 <_svfiprintf_r>
 8006e14:	9b02      	ldr	r3, [sp, #8]
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	b01c      	add	sp, #112	; 0x70
 8006e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e20:	b003      	add	sp, #12
 8006e22:	4770      	bx	lr
 8006e24:	20000010 	.word	0x20000010
 8006e28:	ffff0208 	.word	0xffff0208

08006e2c <__ssputs_r>:
 8006e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e30:	688e      	ldr	r6, [r1, #8]
 8006e32:	429e      	cmp	r6, r3
 8006e34:	4682      	mov	sl, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	4690      	mov	r8, r2
 8006e3a:	461f      	mov	r7, r3
 8006e3c:	d838      	bhi.n	8006eb0 <__ssputs_r+0x84>
 8006e3e:	898a      	ldrh	r2, [r1, #12]
 8006e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e44:	d032      	beq.n	8006eac <__ssputs_r+0x80>
 8006e46:	6825      	ldr	r5, [r4, #0]
 8006e48:	6909      	ldr	r1, [r1, #16]
 8006e4a:	eba5 0901 	sub.w	r9, r5, r1
 8006e4e:	6965      	ldr	r5, [r4, #20]
 8006e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e58:	3301      	adds	r3, #1
 8006e5a:	444b      	add	r3, r9
 8006e5c:	106d      	asrs	r5, r5, #1
 8006e5e:	429d      	cmp	r5, r3
 8006e60:	bf38      	it	cc
 8006e62:	461d      	movcc	r5, r3
 8006e64:	0553      	lsls	r3, r2, #21
 8006e66:	d531      	bpl.n	8006ecc <__ssputs_r+0xa0>
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f000 fb39 	bl	80074e0 <_malloc_r>
 8006e6e:	4606      	mov	r6, r0
 8006e70:	b950      	cbnz	r0, 8006e88 <__ssputs_r+0x5c>
 8006e72:	230c      	movs	r3, #12
 8006e74:	f8ca 3000 	str.w	r3, [sl]
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e7e:	81a3      	strh	r3, [r4, #12]
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295
 8006e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e88:	6921      	ldr	r1, [r4, #16]
 8006e8a:	464a      	mov	r2, r9
 8006e8c:	f7ff ff98 	bl	8006dc0 <memcpy>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	6126      	str	r6, [r4, #16]
 8006e9e:	6165      	str	r5, [r4, #20]
 8006ea0:	444e      	add	r6, r9
 8006ea2:	eba5 0509 	sub.w	r5, r5, r9
 8006ea6:	6026      	str	r6, [r4, #0]
 8006ea8:	60a5      	str	r5, [r4, #8]
 8006eaa:	463e      	mov	r6, r7
 8006eac:	42be      	cmp	r6, r7
 8006eae:	d900      	bls.n	8006eb2 <__ssputs_r+0x86>
 8006eb0:	463e      	mov	r6, r7
 8006eb2:	4632      	mov	r2, r6
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	f000 faa8 	bl	800740c <memmove>
 8006ebc:	68a3      	ldr	r3, [r4, #8]
 8006ebe:	6822      	ldr	r2, [r4, #0]
 8006ec0:	1b9b      	subs	r3, r3, r6
 8006ec2:	4432      	add	r2, r6
 8006ec4:	60a3      	str	r3, [r4, #8]
 8006ec6:	6022      	str	r2, [r4, #0]
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e7db      	b.n	8006e84 <__ssputs_r+0x58>
 8006ecc:	462a      	mov	r2, r5
 8006ece:	f000 fb61 	bl	8007594 <_realloc_r>
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d1e1      	bne.n	8006e9c <__ssputs_r+0x70>
 8006ed8:	6921      	ldr	r1, [r4, #16]
 8006eda:	4650      	mov	r0, sl
 8006edc:	f000 fab0 	bl	8007440 <_free_r>
 8006ee0:	e7c7      	b.n	8006e72 <__ssputs_r+0x46>
	...

08006ee4 <_svfiprintf_r>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	4698      	mov	r8, r3
 8006eea:	898b      	ldrh	r3, [r1, #12]
 8006eec:	061b      	lsls	r3, r3, #24
 8006eee:	b09d      	sub	sp, #116	; 0x74
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	4614      	mov	r4, r2
 8006ef6:	d50e      	bpl.n	8006f16 <_svfiprintf_r+0x32>
 8006ef8:	690b      	ldr	r3, [r1, #16]
 8006efa:	b963      	cbnz	r3, 8006f16 <_svfiprintf_r+0x32>
 8006efc:	2140      	movs	r1, #64	; 0x40
 8006efe:	f000 faef 	bl	80074e0 <_malloc_r>
 8006f02:	6028      	str	r0, [r5, #0]
 8006f04:	6128      	str	r0, [r5, #16]
 8006f06:	b920      	cbnz	r0, 8006f12 <_svfiprintf_r+0x2e>
 8006f08:	230c      	movs	r3, #12
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	e0d1      	b.n	80070b6 <_svfiprintf_r+0x1d2>
 8006f12:	2340      	movs	r3, #64	; 0x40
 8006f14:	616b      	str	r3, [r5, #20]
 8006f16:	2300      	movs	r3, #0
 8006f18:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1a:	2320      	movs	r3, #32
 8006f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f24:	2330      	movs	r3, #48	; 0x30
 8006f26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070d0 <_svfiprintf_r+0x1ec>
 8006f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f2e:	f04f 0901 	mov.w	r9, #1
 8006f32:	4623      	mov	r3, r4
 8006f34:	469a      	mov	sl, r3
 8006f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f3a:	b10a      	cbz	r2, 8006f40 <_svfiprintf_r+0x5c>
 8006f3c:	2a25      	cmp	r2, #37	; 0x25
 8006f3e:	d1f9      	bne.n	8006f34 <_svfiprintf_r+0x50>
 8006f40:	ebba 0b04 	subs.w	fp, sl, r4
 8006f44:	d00b      	beq.n	8006f5e <_svfiprintf_r+0x7a>
 8006f46:	465b      	mov	r3, fp
 8006f48:	4622      	mov	r2, r4
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	f7ff ff6d 	bl	8006e2c <__ssputs_r>
 8006f52:	3001      	adds	r0, #1
 8006f54:	f000 80aa 	beq.w	80070ac <_svfiprintf_r+0x1c8>
 8006f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f5a:	445a      	add	r2, fp
 8006f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 80a2 	beq.w	80070ac <_svfiprintf_r+0x1c8>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f72:	f10a 0a01 	add.w	sl, sl, #1
 8006f76:	9304      	str	r3, [sp, #16]
 8006f78:	9307      	str	r3, [sp, #28]
 8006f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f80:	4654      	mov	r4, sl
 8006f82:	2205      	movs	r2, #5
 8006f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f88:	4851      	ldr	r0, [pc, #324]	; (80070d0 <_svfiprintf_r+0x1ec>)
 8006f8a:	f7f9 f931 	bl	80001f0 <memchr>
 8006f8e:	9a04      	ldr	r2, [sp, #16]
 8006f90:	b9d8      	cbnz	r0, 8006fca <_svfiprintf_r+0xe6>
 8006f92:	06d0      	lsls	r0, r2, #27
 8006f94:	bf44      	itt	mi
 8006f96:	2320      	movmi	r3, #32
 8006f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f9c:	0711      	lsls	r1, r2, #28
 8006f9e:	bf44      	itt	mi
 8006fa0:	232b      	movmi	r3, #43	; 0x2b
 8006fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8006faa:	2b2a      	cmp	r3, #42	; 0x2a
 8006fac:	d015      	beq.n	8006fda <_svfiprintf_r+0xf6>
 8006fae:	9a07      	ldr	r2, [sp, #28]
 8006fb0:	4654      	mov	r4, sl
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	f04f 0c0a 	mov.w	ip, #10
 8006fb8:	4621      	mov	r1, r4
 8006fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fbe:	3b30      	subs	r3, #48	; 0x30
 8006fc0:	2b09      	cmp	r3, #9
 8006fc2:	d94e      	bls.n	8007062 <_svfiprintf_r+0x17e>
 8006fc4:	b1b0      	cbz	r0, 8006ff4 <_svfiprintf_r+0x110>
 8006fc6:	9207      	str	r2, [sp, #28]
 8006fc8:	e014      	b.n	8006ff4 <_svfiprintf_r+0x110>
 8006fca:	eba0 0308 	sub.w	r3, r0, r8
 8006fce:	fa09 f303 	lsl.w	r3, r9, r3
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	9304      	str	r3, [sp, #16]
 8006fd6:	46a2      	mov	sl, r4
 8006fd8:	e7d2      	b.n	8006f80 <_svfiprintf_r+0x9c>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	1d19      	adds	r1, r3, #4
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	9103      	str	r1, [sp, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	bfbb      	ittet	lt
 8006fe6:	425b      	neglt	r3, r3
 8006fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8006fec:	9307      	strge	r3, [sp, #28]
 8006fee:	9307      	strlt	r3, [sp, #28]
 8006ff0:	bfb8      	it	lt
 8006ff2:	9204      	strlt	r2, [sp, #16]
 8006ff4:	7823      	ldrb	r3, [r4, #0]
 8006ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ff8:	d10c      	bne.n	8007014 <_svfiprintf_r+0x130>
 8006ffa:	7863      	ldrb	r3, [r4, #1]
 8006ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ffe:	d135      	bne.n	800706c <_svfiprintf_r+0x188>
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	1d1a      	adds	r2, r3, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	9203      	str	r2, [sp, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	bfb8      	it	lt
 800700c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007010:	3402      	adds	r4, #2
 8007012:	9305      	str	r3, [sp, #20]
 8007014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070e0 <_svfiprintf_r+0x1fc>
 8007018:	7821      	ldrb	r1, [r4, #0]
 800701a:	2203      	movs	r2, #3
 800701c:	4650      	mov	r0, sl
 800701e:	f7f9 f8e7 	bl	80001f0 <memchr>
 8007022:	b140      	cbz	r0, 8007036 <_svfiprintf_r+0x152>
 8007024:	2340      	movs	r3, #64	; 0x40
 8007026:	eba0 000a 	sub.w	r0, r0, sl
 800702a:	fa03 f000 	lsl.w	r0, r3, r0
 800702e:	9b04      	ldr	r3, [sp, #16]
 8007030:	4303      	orrs	r3, r0
 8007032:	3401      	adds	r4, #1
 8007034:	9304      	str	r3, [sp, #16]
 8007036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703a:	4826      	ldr	r0, [pc, #152]	; (80070d4 <_svfiprintf_r+0x1f0>)
 800703c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007040:	2206      	movs	r2, #6
 8007042:	f7f9 f8d5 	bl	80001f0 <memchr>
 8007046:	2800      	cmp	r0, #0
 8007048:	d038      	beq.n	80070bc <_svfiprintf_r+0x1d8>
 800704a:	4b23      	ldr	r3, [pc, #140]	; (80070d8 <_svfiprintf_r+0x1f4>)
 800704c:	bb1b      	cbnz	r3, 8007096 <_svfiprintf_r+0x1b2>
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	3307      	adds	r3, #7
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	3308      	adds	r3, #8
 8007058:	9303      	str	r3, [sp, #12]
 800705a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705c:	4433      	add	r3, r6
 800705e:	9309      	str	r3, [sp, #36]	; 0x24
 8007060:	e767      	b.n	8006f32 <_svfiprintf_r+0x4e>
 8007062:	fb0c 3202 	mla	r2, ip, r2, r3
 8007066:	460c      	mov	r4, r1
 8007068:	2001      	movs	r0, #1
 800706a:	e7a5      	b.n	8006fb8 <_svfiprintf_r+0xd4>
 800706c:	2300      	movs	r3, #0
 800706e:	3401      	adds	r4, #1
 8007070:	9305      	str	r3, [sp, #20]
 8007072:	4619      	mov	r1, r3
 8007074:	f04f 0c0a 	mov.w	ip, #10
 8007078:	4620      	mov	r0, r4
 800707a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800707e:	3a30      	subs	r2, #48	; 0x30
 8007080:	2a09      	cmp	r2, #9
 8007082:	d903      	bls.n	800708c <_svfiprintf_r+0x1a8>
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0c5      	beq.n	8007014 <_svfiprintf_r+0x130>
 8007088:	9105      	str	r1, [sp, #20]
 800708a:	e7c3      	b.n	8007014 <_svfiprintf_r+0x130>
 800708c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007090:	4604      	mov	r4, r0
 8007092:	2301      	movs	r3, #1
 8007094:	e7f0      	b.n	8007078 <_svfiprintf_r+0x194>
 8007096:	ab03      	add	r3, sp, #12
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	462a      	mov	r2, r5
 800709c:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <_svfiprintf_r+0x1f8>)
 800709e:	a904      	add	r1, sp, #16
 80070a0:	4638      	mov	r0, r7
 80070a2:	f3af 8000 	nop.w
 80070a6:	1c42      	adds	r2, r0, #1
 80070a8:	4606      	mov	r6, r0
 80070aa:	d1d6      	bne.n	800705a <_svfiprintf_r+0x176>
 80070ac:	89ab      	ldrh	r3, [r5, #12]
 80070ae:	065b      	lsls	r3, r3, #25
 80070b0:	f53f af2c 	bmi.w	8006f0c <_svfiprintf_r+0x28>
 80070b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070b6:	b01d      	add	sp, #116	; 0x74
 80070b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070bc:	ab03      	add	r3, sp, #12
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	462a      	mov	r2, r5
 80070c2:	4b06      	ldr	r3, [pc, #24]	; (80070dc <_svfiprintf_r+0x1f8>)
 80070c4:	a904      	add	r1, sp, #16
 80070c6:	4638      	mov	r0, r7
 80070c8:	f000 f87a 	bl	80071c0 <_printf_i>
 80070cc:	e7eb      	b.n	80070a6 <_svfiprintf_r+0x1c2>
 80070ce:	bf00      	nop
 80070d0:	080077a4 	.word	0x080077a4
 80070d4:	080077ae 	.word	0x080077ae
 80070d8:	00000000 	.word	0x00000000
 80070dc:	08006e2d 	.word	0x08006e2d
 80070e0:	080077aa 	.word	0x080077aa

080070e4 <_printf_common>:
 80070e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	4616      	mov	r6, r2
 80070ea:	4699      	mov	r9, r3
 80070ec:	688a      	ldr	r2, [r1, #8]
 80070ee:	690b      	ldr	r3, [r1, #16]
 80070f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070f4:	4293      	cmp	r3, r2
 80070f6:	bfb8      	it	lt
 80070f8:	4613      	movlt	r3, r2
 80070fa:	6033      	str	r3, [r6, #0]
 80070fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007100:	4607      	mov	r7, r0
 8007102:	460c      	mov	r4, r1
 8007104:	b10a      	cbz	r2, 800710a <_printf_common+0x26>
 8007106:	3301      	adds	r3, #1
 8007108:	6033      	str	r3, [r6, #0]
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	0699      	lsls	r1, r3, #26
 800710e:	bf42      	ittt	mi
 8007110:	6833      	ldrmi	r3, [r6, #0]
 8007112:	3302      	addmi	r3, #2
 8007114:	6033      	strmi	r3, [r6, #0]
 8007116:	6825      	ldr	r5, [r4, #0]
 8007118:	f015 0506 	ands.w	r5, r5, #6
 800711c:	d106      	bne.n	800712c <_printf_common+0x48>
 800711e:	f104 0a19 	add.w	sl, r4, #25
 8007122:	68e3      	ldr	r3, [r4, #12]
 8007124:	6832      	ldr	r2, [r6, #0]
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	42ab      	cmp	r3, r5
 800712a:	dc26      	bgt.n	800717a <_printf_common+0x96>
 800712c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007130:	1e13      	subs	r3, r2, #0
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	bf18      	it	ne
 8007136:	2301      	movne	r3, #1
 8007138:	0692      	lsls	r2, r2, #26
 800713a:	d42b      	bmi.n	8007194 <_printf_common+0xb0>
 800713c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007140:	4649      	mov	r1, r9
 8007142:	4638      	mov	r0, r7
 8007144:	47c0      	blx	r8
 8007146:	3001      	adds	r0, #1
 8007148:	d01e      	beq.n	8007188 <_printf_common+0xa4>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	68e5      	ldr	r5, [r4, #12]
 800714e:	6832      	ldr	r2, [r6, #0]
 8007150:	f003 0306 	and.w	r3, r3, #6
 8007154:	2b04      	cmp	r3, #4
 8007156:	bf08      	it	eq
 8007158:	1aad      	subeq	r5, r5, r2
 800715a:	68a3      	ldr	r3, [r4, #8]
 800715c:	6922      	ldr	r2, [r4, #16]
 800715e:	bf0c      	ite	eq
 8007160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007164:	2500      	movne	r5, #0
 8007166:	4293      	cmp	r3, r2
 8007168:	bfc4      	itt	gt
 800716a:	1a9b      	subgt	r3, r3, r2
 800716c:	18ed      	addgt	r5, r5, r3
 800716e:	2600      	movs	r6, #0
 8007170:	341a      	adds	r4, #26
 8007172:	42b5      	cmp	r5, r6
 8007174:	d11a      	bne.n	80071ac <_printf_common+0xc8>
 8007176:	2000      	movs	r0, #0
 8007178:	e008      	b.n	800718c <_printf_common+0xa8>
 800717a:	2301      	movs	r3, #1
 800717c:	4652      	mov	r2, sl
 800717e:	4649      	mov	r1, r9
 8007180:	4638      	mov	r0, r7
 8007182:	47c0      	blx	r8
 8007184:	3001      	adds	r0, #1
 8007186:	d103      	bne.n	8007190 <_printf_common+0xac>
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007190:	3501      	adds	r5, #1
 8007192:	e7c6      	b.n	8007122 <_printf_common+0x3e>
 8007194:	18e1      	adds	r1, r4, r3
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	2030      	movs	r0, #48	; 0x30
 800719a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800719e:	4422      	add	r2, r4
 80071a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071a8:	3302      	adds	r3, #2
 80071aa:	e7c7      	b.n	800713c <_printf_common+0x58>
 80071ac:	2301      	movs	r3, #1
 80071ae:	4622      	mov	r2, r4
 80071b0:	4649      	mov	r1, r9
 80071b2:	4638      	mov	r0, r7
 80071b4:	47c0      	blx	r8
 80071b6:	3001      	adds	r0, #1
 80071b8:	d0e6      	beq.n	8007188 <_printf_common+0xa4>
 80071ba:	3601      	adds	r6, #1
 80071bc:	e7d9      	b.n	8007172 <_printf_common+0x8e>
	...

080071c0 <_printf_i>:
 80071c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	460c      	mov	r4, r1
 80071c6:	4691      	mov	r9, r2
 80071c8:	7e27      	ldrb	r7, [r4, #24]
 80071ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071cc:	2f78      	cmp	r7, #120	; 0x78
 80071ce:	4680      	mov	r8, r0
 80071d0:	469a      	mov	sl, r3
 80071d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071d6:	d807      	bhi.n	80071e8 <_printf_i+0x28>
 80071d8:	2f62      	cmp	r7, #98	; 0x62
 80071da:	d80a      	bhi.n	80071f2 <_printf_i+0x32>
 80071dc:	2f00      	cmp	r7, #0
 80071de:	f000 80d8 	beq.w	8007392 <_printf_i+0x1d2>
 80071e2:	2f58      	cmp	r7, #88	; 0x58
 80071e4:	f000 80a3 	beq.w	800732e <_printf_i+0x16e>
 80071e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071f0:	e03a      	b.n	8007268 <_printf_i+0xa8>
 80071f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071f6:	2b15      	cmp	r3, #21
 80071f8:	d8f6      	bhi.n	80071e8 <_printf_i+0x28>
 80071fa:	a001      	add	r0, pc, #4	; (adr r0, 8007200 <_printf_i+0x40>)
 80071fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007200:	08007259 	.word	0x08007259
 8007204:	0800726d 	.word	0x0800726d
 8007208:	080071e9 	.word	0x080071e9
 800720c:	080071e9 	.word	0x080071e9
 8007210:	080071e9 	.word	0x080071e9
 8007214:	080071e9 	.word	0x080071e9
 8007218:	0800726d 	.word	0x0800726d
 800721c:	080071e9 	.word	0x080071e9
 8007220:	080071e9 	.word	0x080071e9
 8007224:	080071e9 	.word	0x080071e9
 8007228:	080071e9 	.word	0x080071e9
 800722c:	08007379 	.word	0x08007379
 8007230:	0800729d 	.word	0x0800729d
 8007234:	0800735b 	.word	0x0800735b
 8007238:	080071e9 	.word	0x080071e9
 800723c:	080071e9 	.word	0x080071e9
 8007240:	0800739b 	.word	0x0800739b
 8007244:	080071e9 	.word	0x080071e9
 8007248:	0800729d 	.word	0x0800729d
 800724c:	080071e9 	.word	0x080071e9
 8007250:	080071e9 	.word	0x080071e9
 8007254:	08007363 	.word	0x08007363
 8007258:	680b      	ldr	r3, [r1, #0]
 800725a:	1d1a      	adds	r2, r3, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	600a      	str	r2, [r1, #0]
 8007260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007268:	2301      	movs	r3, #1
 800726a:	e0a3      	b.n	80073b4 <_printf_i+0x1f4>
 800726c:	6825      	ldr	r5, [r4, #0]
 800726e:	6808      	ldr	r0, [r1, #0]
 8007270:	062e      	lsls	r6, r5, #24
 8007272:	f100 0304 	add.w	r3, r0, #4
 8007276:	d50a      	bpl.n	800728e <_printf_i+0xce>
 8007278:	6805      	ldr	r5, [r0, #0]
 800727a:	600b      	str	r3, [r1, #0]
 800727c:	2d00      	cmp	r5, #0
 800727e:	da03      	bge.n	8007288 <_printf_i+0xc8>
 8007280:	232d      	movs	r3, #45	; 0x2d
 8007282:	426d      	negs	r5, r5
 8007284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007288:	485e      	ldr	r0, [pc, #376]	; (8007404 <_printf_i+0x244>)
 800728a:	230a      	movs	r3, #10
 800728c:	e019      	b.n	80072c2 <_printf_i+0x102>
 800728e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007292:	6805      	ldr	r5, [r0, #0]
 8007294:	600b      	str	r3, [r1, #0]
 8007296:	bf18      	it	ne
 8007298:	b22d      	sxthne	r5, r5
 800729a:	e7ef      	b.n	800727c <_printf_i+0xbc>
 800729c:	680b      	ldr	r3, [r1, #0]
 800729e:	6825      	ldr	r5, [r4, #0]
 80072a0:	1d18      	adds	r0, r3, #4
 80072a2:	6008      	str	r0, [r1, #0]
 80072a4:	0628      	lsls	r0, r5, #24
 80072a6:	d501      	bpl.n	80072ac <_printf_i+0xec>
 80072a8:	681d      	ldr	r5, [r3, #0]
 80072aa:	e002      	b.n	80072b2 <_printf_i+0xf2>
 80072ac:	0669      	lsls	r1, r5, #25
 80072ae:	d5fb      	bpl.n	80072a8 <_printf_i+0xe8>
 80072b0:	881d      	ldrh	r5, [r3, #0]
 80072b2:	4854      	ldr	r0, [pc, #336]	; (8007404 <_printf_i+0x244>)
 80072b4:	2f6f      	cmp	r7, #111	; 0x6f
 80072b6:	bf0c      	ite	eq
 80072b8:	2308      	moveq	r3, #8
 80072ba:	230a      	movne	r3, #10
 80072bc:	2100      	movs	r1, #0
 80072be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072c2:	6866      	ldr	r6, [r4, #4]
 80072c4:	60a6      	str	r6, [r4, #8]
 80072c6:	2e00      	cmp	r6, #0
 80072c8:	bfa2      	ittt	ge
 80072ca:	6821      	ldrge	r1, [r4, #0]
 80072cc:	f021 0104 	bicge.w	r1, r1, #4
 80072d0:	6021      	strge	r1, [r4, #0]
 80072d2:	b90d      	cbnz	r5, 80072d8 <_printf_i+0x118>
 80072d4:	2e00      	cmp	r6, #0
 80072d6:	d04d      	beq.n	8007374 <_printf_i+0x1b4>
 80072d8:	4616      	mov	r6, r2
 80072da:	fbb5 f1f3 	udiv	r1, r5, r3
 80072de:	fb03 5711 	mls	r7, r3, r1, r5
 80072e2:	5dc7      	ldrb	r7, [r0, r7]
 80072e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072e8:	462f      	mov	r7, r5
 80072ea:	42bb      	cmp	r3, r7
 80072ec:	460d      	mov	r5, r1
 80072ee:	d9f4      	bls.n	80072da <_printf_i+0x11a>
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d10b      	bne.n	800730c <_printf_i+0x14c>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	07df      	lsls	r7, r3, #31
 80072f8:	d508      	bpl.n	800730c <_printf_i+0x14c>
 80072fa:	6923      	ldr	r3, [r4, #16]
 80072fc:	6861      	ldr	r1, [r4, #4]
 80072fe:	4299      	cmp	r1, r3
 8007300:	bfde      	ittt	le
 8007302:	2330      	movle	r3, #48	; 0x30
 8007304:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007308:	f106 36ff 	addle.w	r6, r6, #4294967295
 800730c:	1b92      	subs	r2, r2, r6
 800730e:	6122      	str	r2, [r4, #16]
 8007310:	f8cd a000 	str.w	sl, [sp]
 8007314:	464b      	mov	r3, r9
 8007316:	aa03      	add	r2, sp, #12
 8007318:	4621      	mov	r1, r4
 800731a:	4640      	mov	r0, r8
 800731c:	f7ff fee2 	bl	80070e4 <_printf_common>
 8007320:	3001      	adds	r0, #1
 8007322:	d14c      	bne.n	80073be <_printf_i+0x1fe>
 8007324:	f04f 30ff 	mov.w	r0, #4294967295
 8007328:	b004      	add	sp, #16
 800732a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732e:	4835      	ldr	r0, [pc, #212]	; (8007404 <_printf_i+0x244>)
 8007330:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	680e      	ldr	r6, [r1, #0]
 8007338:	061f      	lsls	r7, r3, #24
 800733a:	f856 5b04 	ldr.w	r5, [r6], #4
 800733e:	600e      	str	r6, [r1, #0]
 8007340:	d514      	bpl.n	800736c <_printf_i+0x1ac>
 8007342:	07d9      	lsls	r1, r3, #31
 8007344:	bf44      	itt	mi
 8007346:	f043 0320 	orrmi.w	r3, r3, #32
 800734a:	6023      	strmi	r3, [r4, #0]
 800734c:	b91d      	cbnz	r5, 8007356 <_printf_i+0x196>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	f023 0320 	bic.w	r3, r3, #32
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	2310      	movs	r3, #16
 8007358:	e7b0      	b.n	80072bc <_printf_i+0xfc>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	f043 0320 	orr.w	r3, r3, #32
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	2378      	movs	r3, #120	; 0x78
 8007364:	4828      	ldr	r0, [pc, #160]	; (8007408 <_printf_i+0x248>)
 8007366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800736a:	e7e3      	b.n	8007334 <_printf_i+0x174>
 800736c:	065e      	lsls	r6, r3, #25
 800736e:	bf48      	it	mi
 8007370:	b2ad      	uxthmi	r5, r5
 8007372:	e7e6      	b.n	8007342 <_printf_i+0x182>
 8007374:	4616      	mov	r6, r2
 8007376:	e7bb      	b.n	80072f0 <_printf_i+0x130>
 8007378:	680b      	ldr	r3, [r1, #0]
 800737a:	6826      	ldr	r6, [r4, #0]
 800737c:	6960      	ldr	r0, [r4, #20]
 800737e:	1d1d      	adds	r5, r3, #4
 8007380:	600d      	str	r5, [r1, #0]
 8007382:	0635      	lsls	r5, r6, #24
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	d501      	bpl.n	800738c <_printf_i+0x1cc>
 8007388:	6018      	str	r0, [r3, #0]
 800738a:	e002      	b.n	8007392 <_printf_i+0x1d2>
 800738c:	0671      	lsls	r1, r6, #25
 800738e:	d5fb      	bpl.n	8007388 <_printf_i+0x1c8>
 8007390:	8018      	strh	r0, [r3, #0]
 8007392:	2300      	movs	r3, #0
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	4616      	mov	r6, r2
 8007398:	e7ba      	b.n	8007310 <_printf_i+0x150>
 800739a:	680b      	ldr	r3, [r1, #0]
 800739c:	1d1a      	adds	r2, r3, #4
 800739e:	600a      	str	r2, [r1, #0]
 80073a0:	681e      	ldr	r6, [r3, #0]
 80073a2:	6862      	ldr	r2, [r4, #4]
 80073a4:	2100      	movs	r1, #0
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7f8 ff22 	bl	80001f0 <memchr>
 80073ac:	b108      	cbz	r0, 80073b2 <_printf_i+0x1f2>
 80073ae:	1b80      	subs	r0, r0, r6
 80073b0:	6060      	str	r0, [r4, #4]
 80073b2:	6863      	ldr	r3, [r4, #4]
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	2300      	movs	r3, #0
 80073b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073bc:	e7a8      	b.n	8007310 <_printf_i+0x150>
 80073be:	6923      	ldr	r3, [r4, #16]
 80073c0:	4632      	mov	r2, r6
 80073c2:	4649      	mov	r1, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	47d0      	blx	sl
 80073c8:	3001      	adds	r0, #1
 80073ca:	d0ab      	beq.n	8007324 <_printf_i+0x164>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	079b      	lsls	r3, r3, #30
 80073d0:	d413      	bmi.n	80073fa <_printf_i+0x23a>
 80073d2:	68e0      	ldr	r0, [r4, #12]
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	4298      	cmp	r0, r3
 80073d8:	bfb8      	it	lt
 80073da:	4618      	movlt	r0, r3
 80073dc:	e7a4      	b.n	8007328 <_printf_i+0x168>
 80073de:	2301      	movs	r3, #1
 80073e0:	4632      	mov	r2, r6
 80073e2:	4649      	mov	r1, r9
 80073e4:	4640      	mov	r0, r8
 80073e6:	47d0      	blx	sl
 80073e8:	3001      	adds	r0, #1
 80073ea:	d09b      	beq.n	8007324 <_printf_i+0x164>
 80073ec:	3501      	adds	r5, #1
 80073ee:	68e3      	ldr	r3, [r4, #12]
 80073f0:	9903      	ldr	r1, [sp, #12]
 80073f2:	1a5b      	subs	r3, r3, r1
 80073f4:	42ab      	cmp	r3, r5
 80073f6:	dcf2      	bgt.n	80073de <_printf_i+0x21e>
 80073f8:	e7eb      	b.n	80073d2 <_printf_i+0x212>
 80073fa:	2500      	movs	r5, #0
 80073fc:	f104 0619 	add.w	r6, r4, #25
 8007400:	e7f5      	b.n	80073ee <_printf_i+0x22e>
 8007402:	bf00      	nop
 8007404:	080077b5 	.word	0x080077b5
 8007408:	080077c6 	.word	0x080077c6

0800740c <memmove>:
 800740c:	4288      	cmp	r0, r1
 800740e:	b510      	push	{r4, lr}
 8007410:	eb01 0402 	add.w	r4, r1, r2
 8007414:	d902      	bls.n	800741c <memmove+0x10>
 8007416:	4284      	cmp	r4, r0
 8007418:	4623      	mov	r3, r4
 800741a:	d807      	bhi.n	800742c <memmove+0x20>
 800741c:	1e43      	subs	r3, r0, #1
 800741e:	42a1      	cmp	r1, r4
 8007420:	d008      	beq.n	8007434 <memmove+0x28>
 8007422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800742a:	e7f8      	b.n	800741e <memmove+0x12>
 800742c:	4402      	add	r2, r0
 800742e:	4601      	mov	r1, r0
 8007430:	428a      	cmp	r2, r1
 8007432:	d100      	bne.n	8007436 <memmove+0x2a>
 8007434:	bd10      	pop	{r4, pc}
 8007436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800743a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800743e:	e7f7      	b.n	8007430 <memmove+0x24>

08007440 <_free_r>:
 8007440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007442:	2900      	cmp	r1, #0
 8007444:	d048      	beq.n	80074d8 <_free_r+0x98>
 8007446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800744a:	9001      	str	r0, [sp, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f1a1 0404 	sub.w	r4, r1, #4
 8007452:	bfb8      	it	lt
 8007454:	18e4      	addlt	r4, r4, r3
 8007456:	f000 f8d3 	bl	8007600 <__malloc_lock>
 800745a:	4a20      	ldr	r2, [pc, #128]	; (80074dc <_free_r+0x9c>)
 800745c:	9801      	ldr	r0, [sp, #4]
 800745e:	6813      	ldr	r3, [r2, #0]
 8007460:	4615      	mov	r5, r2
 8007462:	b933      	cbnz	r3, 8007472 <_free_r+0x32>
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	6014      	str	r4, [r2, #0]
 8007468:	b003      	add	sp, #12
 800746a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800746e:	f000 b8cd 	b.w	800760c <__malloc_unlock>
 8007472:	42a3      	cmp	r3, r4
 8007474:	d90b      	bls.n	800748e <_free_r+0x4e>
 8007476:	6821      	ldr	r1, [r4, #0]
 8007478:	1862      	adds	r2, r4, r1
 800747a:	4293      	cmp	r3, r2
 800747c:	bf04      	itt	eq
 800747e:	681a      	ldreq	r2, [r3, #0]
 8007480:	685b      	ldreq	r3, [r3, #4]
 8007482:	6063      	str	r3, [r4, #4]
 8007484:	bf04      	itt	eq
 8007486:	1852      	addeq	r2, r2, r1
 8007488:	6022      	streq	r2, [r4, #0]
 800748a:	602c      	str	r4, [r5, #0]
 800748c:	e7ec      	b.n	8007468 <_free_r+0x28>
 800748e:	461a      	mov	r2, r3
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	b10b      	cbz	r3, 8007498 <_free_r+0x58>
 8007494:	42a3      	cmp	r3, r4
 8007496:	d9fa      	bls.n	800748e <_free_r+0x4e>
 8007498:	6811      	ldr	r1, [r2, #0]
 800749a:	1855      	adds	r5, r2, r1
 800749c:	42a5      	cmp	r5, r4
 800749e:	d10b      	bne.n	80074b8 <_free_r+0x78>
 80074a0:	6824      	ldr	r4, [r4, #0]
 80074a2:	4421      	add	r1, r4
 80074a4:	1854      	adds	r4, r2, r1
 80074a6:	42a3      	cmp	r3, r4
 80074a8:	6011      	str	r1, [r2, #0]
 80074aa:	d1dd      	bne.n	8007468 <_free_r+0x28>
 80074ac:	681c      	ldr	r4, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	6053      	str	r3, [r2, #4]
 80074b2:	4421      	add	r1, r4
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	e7d7      	b.n	8007468 <_free_r+0x28>
 80074b8:	d902      	bls.n	80074c0 <_free_r+0x80>
 80074ba:	230c      	movs	r3, #12
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	e7d3      	b.n	8007468 <_free_r+0x28>
 80074c0:	6825      	ldr	r5, [r4, #0]
 80074c2:	1961      	adds	r1, r4, r5
 80074c4:	428b      	cmp	r3, r1
 80074c6:	bf04      	itt	eq
 80074c8:	6819      	ldreq	r1, [r3, #0]
 80074ca:	685b      	ldreq	r3, [r3, #4]
 80074cc:	6063      	str	r3, [r4, #4]
 80074ce:	bf04      	itt	eq
 80074d0:	1949      	addeq	r1, r1, r5
 80074d2:	6021      	streq	r1, [r4, #0]
 80074d4:	6054      	str	r4, [r2, #4]
 80074d6:	e7c7      	b.n	8007468 <_free_r+0x28>
 80074d8:	b003      	add	sp, #12
 80074da:	bd30      	pop	{r4, r5, pc}
 80074dc:	200049a8 	.word	0x200049a8

080074e0 <_malloc_r>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	1ccd      	adds	r5, r1, #3
 80074e4:	f025 0503 	bic.w	r5, r5, #3
 80074e8:	3508      	adds	r5, #8
 80074ea:	2d0c      	cmp	r5, #12
 80074ec:	bf38      	it	cc
 80074ee:	250c      	movcc	r5, #12
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	4606      	mov	r6, r0
 80074f4:	db01      	blt.n	80074fa <_malloc_r+0x1a>
 80074f6:	42a9      	cmp	r1, r5
 80074f8:	d903      	bls.n	8007502 <_malloc_r+0x22>
 80074fa:	230c      	movs	r3, #12
 80074fc:	6033      	str	r3, [r6, #0]
 80074fe:	2000      	movs	r0, #0
 8007500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007502:	f000 f87d 	bl	8007600 <__malloc_lock>
 8007506:	4921      	ldr	r1, [pc, #132]	; (800758c <_malloc_r+0xac>)
 8007508:	680a      	ldr	r2, [r1, #0]
 800750a:	4614      	mov	r4, r2
 800750c:	b99c      	cbnz	r4, 8007536 <_malloc_r+0x56>
 800750e:	4f20      	ldr	r7, [pc, #128]	; (8007590 <_malloc_r+0xb0>)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	b923      	cbnz	r3, 800751e <_malloc_r+0x3e>
 8007514:	4621      	mov	r1, r4
 8007516:	4630      	mov	r0, r6
 8007518:	f000 f862 	bl	80075e0 <_sbrk_r>
 800751c:	6038      	str	r0, [r7, #0]
 800751e:	4629      	mov	r1, r5
 8007520:	4630      	mov	r0, r6
 8007522:	f000 f85d 	bl	80075e0 <_sbrk_r>
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	d123      	bne.n	8007572 <_malloc_r+0x92>
 800752a:	230c      	movs	r3, #12
 800752c:	6033      	str	r3, [r6, #0]
 800752e:	4630      	mov	r0, r6
 8007530:	f000 f86c 	bl	800760c <__malloc_unlock>
 8007534:	e7e3      	b.n	80074fe <_malloc_r+0x1e>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	1b5b      	subs	r3, r3, r5
 800753a:	d417      	bmi.n	800756c <_malloc_r+0x8c>
 800753c:	2b0b      	cmp	r3, #11
 800753e:	d903      	bls.n	8007548 <_malloc_r+0x68>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	441c      	add	r4, r3
 8007544:	6025      	str	r5, [r4, #0]
 8007546:	e004      	b.n	8007552 <_malloc_r+0x72>
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	42a2      	cmp	r2, r4
 800754c:	bf0c      	ite	eq
 800754e:	600b      	streq	r3, [r1, #0]
 8007550:	6053      	strne	r3, [r2, #4]
 8007552:	4630      	mov	r0, r6
 8007554:	f000 f85a 	bl	800760c <__malloc_unlock>
 8007558:	f104 000b 	add.w	r0, r4, #11
 800755c:	1d23      	adds	r3, r4, #4
 800755e:	f020 0007 	bic.w	r0, r0, #7
 8007562:	1ac2      	subs	r2, r0, r3
 8007564:	d0cc      	beq.n	8007500 <_malloc_r+0x20>
 8007566:	1a1b      	subs	r3, r3, r0
 8007568:	50a3      	str	r3, [r4, r2]
 800756a:	e7c9      	b.n	8007500 <_malloc_r+0x20>
 800756c:	4622      	mov	r2, r4
 800756e:	6864      	ldr	r4, [r4, #4]
 8007570:	e7cc      	b.n	800750c <_malloc_r+0x2c>
 8007572:	1cc4      	adds	r4, r0, #3
 8007574:	f024 0403 	bic.w	r4, r4, #3
 8007578:	42a0      	cmp	r0, r4
 800757a:	d0e3      	beq.n	8007544 <_malloc_r+0x64>
 800757c:	1a21      	subs	r1, r4, r0
 800757e:	4630      	mov	r0, r6
 8007580:	f000 f82e 	bl	80075e0 <_sbrk_r>
 8007584:	3001      	adds	r0, #1
 8007586:	d1dd      	bne.n	8007544 <_malloc_r+0x64>
 8007588:	e7cf      	b.n	800752a <_malloc_r+0x4a>
 800758a:	bf00      	nop
 800758c:	200049a8 	.word	0x200049a8
 8007590:	200049ac 	.word	0x200049ac

08007594 <_realloc_r>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	4607      	mov	r7, r0
 8007598:	4614      	mov	r4, r2
 800759a:	460e      	mov	r6, r1
 800759c:	b921      	cbnz	r1, 80075a8 <_realloc_r+0x14>
 800759e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075a2:	4611      	mov	r1, r2
 80075a4:	f7ff bf9c 	b.w	80074e0 <_malloc_r>
 80075a8:	b922      	cbnz	r2, 80075b4 <_realloc_r+0x20>
 80075aa:	f7ff ff49 	bl	8007440 <_free_r>
 80075ae:	4625      	mov	r5, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b4:	f000 f830 	bl	8007618 <_malloc_usable_size_r>
 80075b8:	42a0      	cmp	r0, r4
 80075ba:	d20f      	bcs.n	80075dc <_realloc_r+0x48>
 80075bc:	4621      	mov	r1, r4
 80075be:	4638      	mov	r0, r7
 80075c0:	f7ff ff8e 	bl	80074e0 <_malloc_r>
 80075c4:	4605      	mov	r5, r0
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d0f2      	beq.n	80075b0 <_realloc_r+0x1c>
 80075ca:	4631      	mov	r1, r6
 80075cc:	4622      	mov	r2, r4
 80075ce:	f7ff fbf7 	bl	8006dc0 <memcpy>
 80075d2:	4631      	mov	r1, r6
 80075d4:	4638      	mov	r0, r7
 80075d6:	f7ff ff33 	bl	8007440 <_free_r>
 80075da:	e7e9      	b.n	80075b0 <_realloc_r+0x1c>
 80075dc:	4635      	mov	r5, r6
 80075de:	e7e7      	b.n	80075b0 <_realloc_r+0x1c>

080075e0 <_sbrk_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4d06      	ldr	r5, [pc, #24]	; (80075fc <_sbrk_r+0x1c>)
 80075e4:	2300      	movs	r3, #0
 80075e6:	4604      	mov	r4, r0
 80075e8:	4608      	mov	r0, r1
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	f7f9 fc4e 	bl	8000e8c <_sbrk>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_sbrk_r+0x1a>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_sbrk_r+0x1a>
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	2000588c 	.word	0x2000588c

08007600 <__malloc_lock>:
 8007600:	4801      	ldr	r0, [pc, #4]	; (8007608 <__malloc_lock+0x8>)
 8007602:	f000 b811 	b.w	8007628 <__retarget_lock_acquire_recursive>
 8007606:	bf00      	nop
 8007608:	20005894 	.word	0x20005894

0800760c <__malloc_unlock>:
 800760c:	4801      	ldr	r0, [pc, #4]	; (8007614 <__malloc_unlock+0x8>)
 800760e:	f000 b80c 	b.w	800762a <__retarget_lock_release_recursive>
 8007612:	bf00      	nop
 8007614:	20005894 	.word	0x20005894

08007618 <_malloc_usable_size_r>:
 8007618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800761c:	1f18      	subs	r0, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	bfbc      	itt	lt
 8007622:	580b      	ldrlt	r3, [r1, r0]
 8007624:	18c0      	addlt	r0, r0, r3
 8007626:	4770      	bx	lr

08007628 <__retarget_lock_acquire_recursive>:
 8007628:	4770      	bx	lr

0800762a <__retarget_lock_release_recursive>:
 800762a:	4770      	bx	lr

0800762c <_init>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr

08007638 <_fini>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr
